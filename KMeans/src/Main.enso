from Standard.Base import all
from Standard.Table import all
from Standard.Database import all
import Standard.Base.Error.Common.Arithmetic_Error
import Standard.Visualization

initial_points number1 operator2 =
    operator5 = [operator2.map _.first, operator2.map _.second]
    operator6 = operator5.first.compute_bulk [Statistic.Minimum, Statistic.Maximum] + operator5.second.compute_bulk [Statistic.Minimum, Statistic.Maximum]
    if number1 == 4 then [[operator6.at 0, operator6.at 2], [operator6.at 0, operator6.at 3], [operator6.at 1, operator6.at 2], [operator6.at 1, operator6.at 3]] else
        0.up_to number1 . map _-> [operator6.at 0 + (operator6.at 2 - operator6.at 0) * Random.float, operator6.at 1 + (operator6.at 3 - operator6.at 1) * Random.float]

kmeans operator2 operator7 iteration=0 max_iterations=50 epsilon=0.0000001 =
    operator8 = operator2.map r-> operator7.map_with_index i->c->[i, (r.first-c.first)^2 + (r.second-c.second)^2] . sort on=_.second . first
    operator9 = operator7 . map _-> [0,0,0]
    operator10 = operator8.fold_with_index operator9 c->i->v-> c.map_with_index j->s-> if v.first != j then s else [s.at 0 + 1, operator2.at i . at 0 + s.at 1, operator2.at i . at 1 + s.at 2]
    operator11 = operator10.map_with_index i->c-> if c.at 0 == 0 then operator7.at i  else [c.at 1 / c.at 0, c.at 2 / c.at 0]
    operator12 = operator11.map_with_index i->c->((operator7.at i . first - c.first)^2 + (operator7.at i . second - c.second)^2).sqrt . any v-> v>epsilon 
    if operator12.not then operator11 else if iteration >= max_iterations then Error.throw (Arithmetic_Error.Error "Failed to converge.") else @Tail_Call kmeans operator2 operator11 iteration+1 max_iterations epsilon

main =
    var1 = ["cross", "diamond", "star", "triangle"]
    ## Create a set of random points
    operator1 = 0.up_to 800 . to_vector . map _-> Random.float
    ## Assign the random points to 4 regions
    operator2 = operator1.map_with_index i->v-> [0.7*v + (if i%4 >= 2 then 1 else 0), i%2 + 0.7 * Random.float, var1.at i%4, Nothing, 0.1]
    operator3 = Table.from_rows ["X","Y", "shape", "color", "Size"] operator2
    ## Create 4 initial points.
    operator7 = initial_points 4 operator2
    ## Iterate the 4 points against the dataset to find the K-means values.
    operator11 = kmeans operator2 operator7
    operator5 = operator11.map r-> r + ["circle", "red", 0.2]
    sum1 = operator2 + operator5
    operator6 = Table.from_rows ["X","Y", "shape", "color", "Size"] sum1



#### METADATA ####
[[{"index":{"value":228},"size":{"value":47}},"8f5c90d9-80bb-4ba1-ad24-22d602cdd2ed"],[{"index":{"value":292},"size":{"value":138}},"82dd4854-b981-4f5c-8a55-ba94cd332ec6"],[{"index":{"value":435},"size":{"value":331}},"f35328d3-04f7-4b0c-98a0-cc02ce9be58d"],[{"index":{"value":1739},"size":{"value":40}},"fb028def-972e-49fb-917d-ddfc45450c8f"],[{"index":{"value":1833},"size":{"value":46}},"03ae3e88-375d-4971-93f4-2f816c6118b7"],[{"index":{"value":1941},"size":{"value":122}},"92c05999-625d-4bf2-a7ba-d2fdb9a9d006"],[{"index":{"value":2080},"size":{"value":61}},"760101a5-b8fe-4681-86cf-1fc02232a8c6"],[{"index":{"value":2190},"size":{"value":26}},"51e3c6d8-8e16-4a37-bc70-c683850a0c89"],[{"index":{"value":2310},"size":{"value":26}},"2da905c3-e5ca-4662-a7c6-16634a31d791"],[{"index":{"value":2353},"size":{"value":45}},"965fcece-a309-4f40-aa41-ddba87cd01a9"],[{"index":{"value":2410},"size":{"value":21}},"9dfab383-a9f3-41d3-bc7e-b3ef813ba9cd"],[{"index":{"value":2448},"size":{"value":56}},"c1cca698-cdd8-4442-99f8-9dbfbc23ca68"]]
{"ide":{"node":{"8f5c90d9-80bb-4ba1-ad24-22d602cdd2ed":{"position":{"vector":[-100,136]}},"82dd4854-b981-4f5c-8a55-ba94cd332ec6":{"position":{"vector":[-100,72]}},"f35328d3-04f7-4b0c-98a0-cc02ce9be58d":{"position":{"vector":[-100,8]}},"fb028def-972e-49fb-917d-ddfc45450c8f":{"position":{"vector":[435,11]}},"03ae3e88-375d-4971-93f4-2f816c6118b7":{"position":{"vector":[-564,11]}},"92c05999-625d-4bf2-a7ba-d2fdb9a9d006":{"position":{"vector":[-564,-53]}},"760101a5-b8fe-4681-86cf-1fc02232a8c6":{"position":{"vector":[-564,-114]},"visualization":{"show":true,"width":565.5625,"height":230,"project":{"project":"Builtin"},"name":"Scatter Plot"}},"51e3c6d8-8e16-4a37-bc70-c683850a0c89":{"position":{"vector":[232,-125]},"visualization":{"show":true,"width":459.78125,"height":185}},"2da905c3-e5ca-4662-a7c6-16634a31d791":{"position":{"vector":[51,-439]},"visualization":{"show":true,"width":538.71875,"height":196,"project":{"project":"Builtin"},"name":"Table"}},"965fcece-a309-4f40-aa41-ddba87cd01a9":{"position":{"vector":[-564,-503]}},"9dfab383-a9f3-41d3-bc7e-b3ef813ba9cd":{"position":{"vector":[-676,-567]}},"c1cca698-cdd8-4442-99f8-9dbfbc23ca68":{"position":{"vector":[-676,-673]},"visualization":{"show":true,"width":708.1238035395786,"height":283.04763474544825,"project":{"project":"Builtin"},"name":"Scatter Plot"}}},"widget":{},"import":{},"snapshot":"eJydVk2P2zYQvftXvCpYwM5KrKR14u1BQtNtCxRFeugGRQvDEbgSbTORSJekvdv8+oCkbEv0JgWiiyh+zHsz82aotZId7g0VDVUN+YlqBt7tpDKgbTtZj1bf0Yf2K8s/U0MfAgP9cARAflFKKnInu04K8kZxs+2Y4XXl5i+O/MX1nrb8EzVcismEC244baud5MJoiH33wFQGuWOKGqlyFBMAp+9XKLA8LZKO7lCRNVfaxAinNaulaFaj869RnG35g6SW3W5vWPWwbz9ieW+o4drwmrzlgnf7LsZgij7ZqRWuB1Y8zreYcdT4+uR1UWAOs2UCy5OTrwk1SM/eue98FePrO24udmT/ayPccbNagbWaOZr2Scl+Vxl54kvgIp2UIRlcYzoGQzK2nc7wEn9S0ciOrFtJTYCdXZi4CU1koYnVZPKxY1TogXyOowW4sSMuRZGio0/V6VsXr1KwneatXSOpe7JAeLcD4XiBqaQ8W7cz1SM324qLhj2BJ2WdlEseY6q8zJLav2fvc+ua6mWT1P1g9j5fgUDbYpGiOMoXBO7YiMwPAzKLYRbSOI3TseKzdLD5lqxl2wyJnk3WScmT8pCUqENvPiSlTkqr1IN3At8V+OCVqp1EsNTHxGfDSqQGHAT9kg5UNlzPjut5wD8b8M/S5wNtqdWeQFEg9czOyXEoPc/aq+v7fn/s3/lpIkDPh+jZ8+jTaQDV5wwJxkm/2Nbn2O47qWBG9L/K2KCI/2DTcSh7ceLYL87siJBm7G2WeUf5+qx4lEUgeX/Gd26zVfIR07Bz+76O6FfKW9bASNRSHJjaMBLNPMaP7yhvqzvatvhi4WXZmcd1FtLoPZtMOspFX3IHalshllGtpNZRjKjhtJOisUNtqLJvozgVm5ZFPl8vXuBOMWoYKDQzkGso1xngL5ZxUlGcWtltmoLAyOrAaiPVoJiGneWI8UZrvhE2eGPzNjpzKLaxTo2wRvp5Rj4HV7Zk8fJgBWKTdjW36cp9hvpkprMY/MpqKCWLi8ZpA+YUdTWP8Yc0Wy42MVKSjbV8gwLuzif2oq+UfNRYRn9HcfSPi+yW7pgd1LKVLsb3/BOLVmdXgkjP0V/efRDICG2BAsHlPr809ZuTAnMRnR+DSTeUC+10jYYaahNqJNZcNG7u98SL7UDbPQtgXbv48i1w8TMxrm3X1BWurfi4qlsXD8Ws8lLSNya974YtKR/+C1z8a3xLvC3A5DPE5TGb"}}