from Standard.Base import all
from Standard.Table import all
from Standard.Database import all
from Standard.AWS import all
from Standard.Google_Api import all
import Standard.Visualization

## ![image](eags.png)

   # Selecting and Joining Data

   In this exercise, you will read an Excel workbook containing three (3) worksheets of connected information about bank customers.  You need to create a summary of information about the Savings Accounts that includes:

   account_id | open_date | created_date | last_updated_date | active_passive | Base Rate

   Join the Customers, Accounts and ECBRates worksheets together to solve this exercise.  The exercise begins with the ***Data.read*** component. .

   ## **Objective 1:**  Read the Accounts to only “Savings” products, limiting the columns of data to the required columns/elements:

   1️⃣        Add a new component after the ***Data.read*** component by either dragging from the output port (the bottom edge) of the ***Data.read*** component, or clicking the ➕ button on the component.

   - Choose the ***read*** component
   - Click on the query argument
   - Select the Accounts sheet
   2️⃣        Filter to the Savings products by adding a new component after the ***read*** component by either dragging from the output port (the bottom edge) of the ***read*** component, or clicking the ➕ button on the component.

   - Choose the ***filter*** component
   - Click on the column argument
   - Select the [product_name] column
   - Click on the filter argument
   - Select the Equals option
   - Click on the “to” argument
   - Select the <Text Value> option
   - Click into the “ “ argument
   - Type “Savings Account” (case sensitive)

   You should see Total Row Count: 2026 at the bottom of the filter table visualization.


   ![Image](/images/image.png)


   3️⃣        Add a new component after the ***filter*** component by either dragging from the output port (the bottom edge) of the ***filter*** component, or clicking the ➕ button on the component.

   - Choose the ***select_columns*** component
   - Click on the column argument
   - Select the [account_id] and [open_date] columns


   ![Image](/images/image_1.png)


   ## **Objective 2:**  Read the Customers data

   1️⃣        Add a new component after the ***Data.read*** component by either dragging from the output port (the bottom edge) of the ***Data.read*** component, or clicking the ➕ button on the component.

   - Choose the ***read*** component
   - Click on the query argument
   - Select the [Customers] sheet

   ### 

   ## **Objective 3:**  Join the Accounts (Left) and the Customers (Right) data together

   1️⃣        Add a new component after the ***select_columns*** component by either dragging from the output port (the bottom edge) of the ***select_columns*** component, or clicking the ➕ button on the component.

   - Choose the ***join*** component (*Note:  This will become the Left set of data*)
   2️⃣        Connect the outgoing data from the ***read*** component (Customers) by dragging from the output port (the bottom edge) of the ***read*** component to the, or clicking the ➕ button on the “right” argument on the ***join*** component.

   ·      Choose an appropriate “join_kind” argument option ([https://help.enso.org/docs/api/Standard.Table/Table/Table.join/](https://help.enso.org/docs/api/Standard.Table/Table/Table.join/))

   ·      Click on the on (➕) and accept the [account_id] (1st field) column

   ·      Click on the right argument and select the [acct_id] column

   ·      Check your results and choose again (if necessary)

   NOTE: in the screenshot below, the ***read*** component with the **Customers** worksheet is connected to the Data.read at the top of the workflow.


   ![Image](/images/image_2.png)


   3️⃣        Remove the [acct_id] column

   ·      Add a ***remove_columns*** component following ***join*** component (*Note:  You can select_columns and choose all desired columns or use the remove_columns component and de-select the one unnecessary column*).

   ### You should now have 1026 rows with columns: account_id, open_date, created_date, last_updated_date, active_passive.

   ![Image](/images/image_3.png)

   ## **Objective 4:**  Joining your data to the ECB Rates

   The ECB rates are provided as a table of Start Date, End Date, Rate. The final task is to join the result from above to these rates.  There is a challenge in using the ECB data.  The use of the table reads each row as follows:  Date greater than or equal to [StartDate] until [EndDate].  In this definition of the table, there is a redundancy where each [StartDate] is equal to the prior period’s [EndDate].

   1️⃣        Add a new component after the ***Data.read*** component by either dragging from the output port (the bottom edge) of the ***Data.read*** component, or clicking the ➕ button on the component.

   - Choose the ***read*** component
   - Click on the query argument
   - Select the [ECBRates] sheet
   2️⃣        Add a ***set*** component to the output of the ***read*** component (to subtract 1 day from the [EndDate]).

   ·      Click on the value argument and select the <Simple Expression> option

   ·      Click on the input argument and select the [EndDate] column

   ·      Click on the operation argument and select the “Date" option.

   ·      Click on the operation argument and select the “add" option.

   ·      Click on the length argument and select the “Number Value” option

   ·      Type “-1” into the argument

   ·      Click on the period argument and select the “Day” option

   ·      Type “EndDate” in the ‘as’ argument

   ·      Check your results to see non-overlapping date ranges


   ![Image](/images/image_4.png)


   3️⃣        Add your new ***join*** component to bring the data from the ***remove_columns*** component into the ***join*** component and then connect the output anchor from the ***set*** component (ECBRates – Fixed).

   Based on the account’s [open_date], use the join tool to join to the date ranges in the ECB rate data easily

   ·      Connect the data from the ***set*** component into the right argument in the ***join*** component

   ·      Click on the join_kind argument and select the “Inner” option

   ·      Click on the ➕ button (on [+])

   ·      Click on the Equals (default) and select “Between”

   ·      Click on the left argument and select [open_date]

   ·      Click on the right_lower argument and select [StartDate]

   ·      Click on the right_upper argument and select [EndDate]



   ![Image](/images/image_5.png)


   ## **Objective 5:**  Final data preparation

   You’ll want to remove unnecessary columns, followed by renaming of Interest Rate and finally the filtering to only “Active” accounts.

   1️⃣        Remove the `StartDate` and `EndDate` columns.

   ·      Use the ***remove_columns*** component for the [StartDate] and [EndDate] columns

   You should still have 1026 rows with columns: account_id, open_date, created_date, last_updated_date, active_passive, StartDate, EndDate and InterestRate.

   2️⃣        Rename the [InterestRate] column to [Base Rate]

   ·      Add a new ***rename_columns*** component after the ***remove_columns*** component

   ·      Click on the ➕ button (on [+])

   ·      Click on the “account_id” (default 1st column) and select the [InterestRate] column

   ·      Click on the “New Name” (default) and type “Base Rate” as replacement text

   ·      Next, using a `rename_columns` component, rename the `InterestRate` to `base_rate`.

   3️⃣        Filter to the active accounts

   ·      Add a new ***filter*** component after the ***rename_columns*** component

   ·      Click on the column argument

   ·      Select the [active_passive] column. The default argument is ***is_true*** so there is no requirement to enter this, but readability is enhanced by adding this argument.

   ·      Check to see how many rows of data are present in your visualization

   ### 

   ![Image](/images/image_7.png)

   ### **You should now have 676 rows with columns: account_id, open_date, created_date, last_updated_date, active_passive, StartDate, EndDate and Base Rate.**
main =
    operator1 = "Selecting and Joining Data"
    node1 = Data.read enso_project.data/"Customer Data.xlsx"



#### METADATA ####
[[{"index":{"value":8235},"size":{"value":28}},"96ab67a9-9096-4751-a2d2-e679f07870d7"],[{"index":{"value":8276},"size":{"value":48}},"9e0c0be9-a11e-4c16-8593-a18f1cbb94e3"]]
{"ide":{"node":{"96ab67a9-9096-4751-a2d2-e679f07870d7":{"position":{"vector":[-17,75]}},"9e0c0be9-a11e-4c16-8593-a18f1cbb94e3":{"position":{"vector":[-16,3]},"visualization":{"show":true}}},"widget":{},"snapshot":"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","import":{}}}