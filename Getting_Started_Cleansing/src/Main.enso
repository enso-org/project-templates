from Standard.Base import all
from Standard.Table import all
from Standard.Database import all
from Standard.AWS import all
from Standard.Google_Api import all
import Standard.Visualization

## ![Image](eags.png)

   # Cleansing and Parsing Data

   **This exercise is available on the Enso Community at <<https://community.ensoanalytics.com/c/enso-analytics-101/>>. Working through the exercises on Community lets you to keep track of your progress, and allows you to open the exercise on a second screen. You will need to create a free account on the Enso Community to access the lessons.**

   ### IT IS HIGHLY RECOMMENDED THAT YOU EXPERIENCE THIS EXERCISE BY USING THE LEARNING PATH ON ENSO COMMUNITY!

   This is the third in a series of four (4)  Exercises designed to help you quickly master Enso Analytics. Each Exercise is broken up in to a number of learning objectives.


   Start with Excel basics and visual components, then advance through aggregations, data cleaning, and multi-sheet integration. Each exercise tackles common business scenarios‚Äîfrom messy data cleanup to customer analysis across multiple datasets.


   By completion, you'll have the confidence to handle your organization's data challenges. 


   Users who complete these four exercises before jumping into their first real use case are over **10 times more likely to be successful**.


   The [Enso Community](<https://community.ensoanalytics.com>) provides advanced workflows for continued growth beyond these foundational skills.


   > **Note:** This example assumes you have completed Exercises 1 and 2 which have very detailed instructions on how to add and configure new components, how to open each components visualization panel, how to move and reconnect components and more.If you haven't completed these exercises, and the instructions are not sufficient here, we highly recommend you start with these two exercises.


   > 

   ## Overview
   Data types are fundamental to performing analysis in Enso Analytics, as they determine what operations and calculations can be applied to your data. For instance, dates must be stored as date data types rather than text to enable proper date arithmetic, sorting, and time-based filtering, while numeric values need to be in number formats to support mathematical operations and statistical functions.


   In this example, we are going to work through tidying up a CSV data file.¬†  Our objective of this exercise is to achieve the following:

   1. ¬†¬†¬† Ensure that all Date columns are stored as DATE data types
   2. ¬†¬†¬† Convert all applicable fields to BOOLEAN (T/F) data types
   3. ¬†¬†¬† Convert all ‚ÄúN/A‚Äù text values to Nothing (aka Null) values




   ## **Objective 1:**¬† Open a CSV file and examine Data Types for each column

   ## Step 1 of 2 - Read a CSV file

   - In the toolbar at the top of the canvas, click on the¬†**+ Input**¬†button to add a new Input Component. This will open the Input Component Browser.
   - In the component browser, Choose the¬†***Data.read***¬†component by clicking on its name.
   - Click on the word¬†*path*¬†that is highlighted in royal blue on the¬†***Data.read***¬†component.
   - Click on¬†*Choose file...*
   - Navigate to your Documents/enso-projects/Samples/Data folder.
   - Choose the file named **crm_data.csv.**
   - Open the component‚Äôs data visualization to see the records by clicking on the **eye** icon in its quarter circle menu.

   ## Step 2 of 2 - Examine the Data Types for each column

   - Add a ***column_info*** component after the ***Data.read*** component
   - - From the "Hamburger" menu on the¬†***Data.read***¬†component, select¬†**+ Add New Component**¬†to open the¬†**Component Browser**
     - - Choose ***column_info*** by clicking on its name in the Metadata list in the Component Browser or by typing "column_info" which will narrow the list of all available components.
   - Open the data visualization to see the column information
   - - Move your mouse over the ***column_info*** component. This will enable the quarter circle menu on the left edge of the component.
     - - In the quarter circle menu, click on the **eye** icon to open the visualization see the column names, the count of of ‚Äúnot nothing‚Äù values in each column, and the data type for each column (e.g. Integer, Char, or Date). And starting with version 2025.2, a number of statistics to better understand your dataset, including:
     - - The number of distinct (non-duplicate) values in each column.
       - The minimum and maximum values in each column
       - For char (string) columns, the number of empty, untrimmed, and non-trivial whitespace in each column. Non-trivial whitespace would include embedded tabs, line feeds, and other non-printable characters).
   ![Image](/images/image_7.png)


   ### **Observations:** 

   - The data has values in each row in each column. The Items Count counts only non-nothing (non-null) values. Since we have a value of 2,000 for each column, we know that we have a complete data set.
   - The data contains various (5) True/False columns stored as a Char type (active_passive, deleted_flag, is_preferred, is_employee and special).
   - The **report_date** column is stored as an integer (`20,240,601` in this case).

   ### **üéâü•≥üéàCONGRATULATIONS! You learned how to identify challenges in a dataset using column_info!**

   - You also learned about different data types, such as Char, Date and Integer. Enso also supports Float, Decimal, and Mixed data types.



   ## **Objective 2:**¬† Convert the report_date from an Integer into a Date column:

   As you saw in the observations from Exercise 1, our **report_date** column was stored as an integer, and not as a date.

   In order to accomplish this data type transformation, we‚Äôll use a ***parse*** component to apply the date structure to the **report_date** column.¬† The ***parse*** component however expects a ‚ÄúChar‚Äù data type as input.¬† We will first convert from Integer to a Character, then parse the Date to complete this transition.

   ## **Step 1 of 2 - convert the report_date column to a char type**

   - Add a new component after the ***Data.read*** component
   - - From the "Hamburger" menu on the¬†***Data.read***¬†component, select¬†**+ Add New Component**¬†to open the¬†**Component Browser**.
   - Choose ***format*** by clicking on its name in the Conversions list in the Component Browser or by typing "format" which will narrow the list of all available components.
   - Click on the columns argument and select the **report_date** column
   - You now have changed the **report_date** to a Char data type (also known as a string).
   - Check your work by opening the visualization on the ***format*** component. You should notice the T next to the filter icon in the **report_date** header in the visualization, and the commas are now removed.
   - 
   ![Image](/images/text_heading.png)



   ## **Step 2 of 2 - convert the report_date column to a date type**
   Add a new component after the ***format*** component.
   -  From the "Hamburger" menu on the¬†***format***¬†component, select¬†**+ Add New Component**¬†to open the¬†**Component Browser**.
   - Choose ***parse*** by clicking on its name in the Conversions list in the Component Browser or by typing "parse" which will narrow the list of all available components.
   - Click on the ‚Äúcolumns‚Äù argument and select the **report_date** column
   - Click on the ‚Äútype‚Äù argument and select the Date option (a warning will appear and will disappear after you properly configure the "format" argument in the next step)
   - - Click on the ‚Äúformat‚Äù argument and either select the desired output format from the dropdown list or type your format.¬† If your input format isn‚Äôt present (as in this example), simply select any similar format and EDIT/Update the provided mask (e.g. yyyyMMdd) by clicking into the format and typing over the provided choice. - Learn more about Enso custom format strings [here](https://help.enso.org/docs/using-enso/custom-formats).
   - Check your work by opening the visualization as described above. You should see a calendar icon in the header row, and the date should be in an ISO standard format (e.g. 2024-06-01).
   See how the data type changes from Integer (in the ***Data.read*** component) to Char (in the ***format*** component) to Date (in the ***parse*** component).

   ![Image](/images/image_9.png)

   > **Note:** Using a ***format*** component with no other configuration (as we did above) does a simple conversion from numbers, dates and boolean types to a Char type. By adding a format, as we did in the parse component, you can format the output how you wish. For example, with a format string of ‚Äúyyyy-MM-dd‚Äù, we could have formatted the text to appear as 2024-06-01. This still would be a text representation of the date, and we still would need to use a ***parse*** component to convert to a date type.


   ### **üéâü•≥üéàCONGRATULATIONS! You have converted the report_date column from an Integer type, to a Char type to a Date type.**

   - You learned how to use the ***format*** component to convert from a number (Integer) to text (Char).
   - You learned how to convert text-based dates to a date type using the ***parse*** component.


   ## **Objective 3:**¬† Normalize the Active_Passive data values into a Boolean (T/F) type

   ## Step 1: Ensure there are only two values in the column

   When there are only two possible values (plus optionally *Nothing),* converting data to a boolean type is recommended.

   - Boolean values use less memory (1 bit vs multiple characters for text)
   - Smaller output file sizes
   - Simplifies filter conditions (activeCRM=True vs active_passive = ‚ÄúActive‚Äù)
   Before we do any conversion of the data, we need to validate that the only values in the Active_Passive column are in fact "Active" or "Passive" and that there are no Unknown or *Nothing* values.¬†

   - Add a new component after the ***parse*** component (see Objective 2 for step by step instructions).
   - - Choose the ***aggregate*** component (this is in Enso's list of suggestions in the Component Browser)
   - - Click on the ‚ûï sign to the right of the **group_by** argument and select the **active_passive** column.
   - - Click on the ‚ûï sign to the right of the **columns** argument which will default to Count.
   - - Open the visualization on the ***aggregate*** component to view the results (see Objective 1 if you have forgotten how to open a component‚Äôs visualization).
   - You can now see 1,347 Active and 653 Passive counts. We now are confident that there are only two values, Active and Passive, and there are no *Nothing* values.

   ## Step 2: Create a new column called activeCRM that has true/false values for Active/Passive values**

   - Move the ***aggregate*** component to the right by clicking and dragging it with the mouse to create space to add a second component.
   - Add a new component after the ***parse*** component. (see Objective 2 Step 1 if you need help).
   - Choose the ***set*** component and configure it to create a new **activeCRM** column with a ‚ÄúTrue‚Äù value when the incoming **active_passive** data is ‚ÄúActive‚Äù.
   - - Click on the value argument and choose <Simple Expression>.
   - - Click on the input argument and choose the **active_passive** column.
   - - Click on the operation argument and choose the ‚Äúif‚Äù operation.
   - - Click on the condition argument and choose the ‚Äú..Equal‚Äù option.
   - - Click on the to argument and choose the <Text Value> option.
   - - Type the value ‚ÄúActive‚Äù between the quote marks.
   - - There is no need to choose values for **true_value** and **false_value** as they will default to **True** and **False**.
   - - Type the value ‚ÄúactiveCRM‚Äù in between the quotation marks which follow the term: ‚Äúas‚Äù located to the right after the ‚Äòtrue & false‚Äô arguments
   - Open the visualization on the ***set*** component and scroll to the right to get to the last column, which is the new activeCRM column. Data values that are True have a check mark, and False are blank.
   ![Image](/images/image_2.png)


   ### **üéâü•≥üéàCONGRATULATIONS! You have converted text data to a new boolean column called activeCRM!**

   - Learned that it is best to validate that there are just two values using an ***aggregate*** component.
   - Used a ***set*** component to build an if statement to make ‚ÄúActive‚Äù true and ‚ÄúPassive‚Äù false.




   ## **Objective 4:**¬† Convert the deleted_flag data values into a Boolean (T/F) type

   ## Mastering what you have learned

   Repeat your learnings from Objective 3 and prove the data domain values in the **deleted_flag** column are ‚ÄúDeleted‚Äù and ‚ÄúNot Deleted‚Äù.¬† (If you get stuck, go back and look at the instructions for Objective 3)


   Then you can UPDATE the ***deleted_flag*** column by setting the as ‚Äú ‚Äú argument to the originating column name. You will do this by typing ‚Äúdeleted_flag‚Äù in the as ‚Äú ‚Äú argument.


   The new ***aggregate*** and ***set*** components will originate from the ***set*** component that you just created.


   ![Image](/images/image_3.png)

   > **Note:** When you set the as argument to the originating column for the expression, you overwrite (in the new table) the column with the updated value. It will also automatically convert the column to the correct data type, in this case boolean.

   ### **üéâü•≥üéàCONGRATULATIONS! You have MASTERED converting text data to boolean!**
   - You also learned how to update an existing column, instead of creating a new column, using the ***set*** component!
   > 



   ## **Objective 5:**¬† Parse the ‚ÄúYes/No‚Äù Char fields into a Boolean (T/F) type

   There are three (3) fields, **is_preferred** , **is_employee** and **special** that can be parsed (converted) in a single step.

   Add a new component after the last ***set*** component added in Objective 4.

   - Choose the ***parse*** component
   - - Click on the columns argument and choose the **is_preferred, is_employee** and **special** columns.
   - - Click on the type argument and choose the Boolean option.
   - - Click on the format argument and choose the ‚ÄòYes|No (Boolean)‚Äô option

   Open the visualization on the ***parse*** component to see that you have now converted the data types for all three fields.

   ![Image](/images/image_4.png)

   >**Note**: The format option of ‚ÄòYes|No‚Äô looks for the exact words Yes and No. If the data had been upper case, you would type over the format option with YES|NO to properly handle the conversion.
   >

   ### **üéâü•≥üéàCONGRATULATIONS! You have converted multiple columns from Yes No values to boolean type**
   - The ***parse*** component, and other components such as ***format*** can convert multiple columns at once. They need to be identical conversions however. If one of the columns had ‚ÄúYES‚Äù and ‚ÄúNO‚Äù values, we would have handled the first two columns in one ***parse*** component, and the ‚ÄúYES‚Äù and ‚ÄúNO‚Äù column in a second ***parse*** component.
   - 




   ## **Objective 6:**¬† Within the crm_code column, replace the ‚ÄúN/A‚Äù value with ‚ÄòNothing‚Äô.

   This is the last bit of normalization that we are going to perform on this dataset. In the **crm_code** column there are many instances of ‚ÄúN/A‚Äù. We want to replace these with *Nothing (null).*

   - Add a new component after the **parse** component that we added in Objective 5.
   - Choose the ***replace*** component
       - Click on the ‚ûï following the ‚Äúlookup_table‚Äù operator to see ‚ÄúPair Value‚Äù appear
       - Type ‚ÄúN/A‚Äù (without the quotes) over the default of ‚ÄòCurrent‚Äô text
       - Click on the ‚ÄúNew‚Äù text argument and scroll down to select the <Nothing> option
       - Click on the ‚ûï following the ‚Äúcolumns‚Äù operator
       - Select the **crm_code** column
       - Open the visualization on the¬†***replace***¬†component to see that you have replaced the N/A values in the **crm_code**** column with ‚ÄòNothing‚Äô.
   ![Image](/images/image_5.png)
   > **Note:** The ***replace*** component can replace more than one value at a time. Just add additional pairs of Current and New values. The ***replace*** component requires that a full value gets replaced. So if the value in one of the fields was ‚ÄúN/A ‚Äú (where there is a space at the end of the text, that instance would not be replaced. A lookup table can be read in and passed into the lookup table parameter as well, and this is particularly useful if there are a large number of replacements that are being done. You can learn more in this [community post](<https://community.ensoanalytics.com/c/tips-and-tricks/every-parameter-can-be-dynamic>).


   ### **üéâü•≥üéàCONGRATULATIONS! You have replaced N/A values with Nothing**
   - The¬†***replace***¬†component can quickly replace one or more values with new values, which is critical in data normalization projects.




   ## **Objective 7:**¬† Output the results to a CSV file

   Having now tidied the data, the last step is to write it out to a new file.
   - Add a new component after the ***replace*** component 
   - Chose the ***write*** component from the suggestions list
   - Select the output path (where to create a new CSV file) by configuring the path argument. You must give the file the extension csv, but you are not required to set any other parameters.
   - The file will not be written at this point. You will notice a yellow triangle indicating a warning to the left of the ***write*** component.
   - Click the ‚ñ∂Ô∏é button at the top of the canvas to refresh the workflow and write the output(s). 
   The output file should now be created at the location you specified.


   ![Image](/images/image_6.png)

   > **Note:** Enso Analytics is constantly processing your data with each new component and each configuration change. This feature gives instant feedback to a user.The one exception is when Enso is writing to a file, a database, or a web api. For these operations, a user must click the ‚ñ∂Ô∏é button to write all outputs, or if you have multiple outputs and only want to write to one, you can choose the write button in its hamburger menu.


   ### **üéâü•≥üéàCONGRATULATIONS! You have written your results to a csv file!**

   - The¬†***write***¬†component can output to a variety of formats such as delimited (e.g. CSV), Excel, and JSON.
main =
    operator1 = "Cleaning and Parsing Data"



#### METADATA ####
[[{"index":{"value":18268},"size":{"value":27}},"7c75350c-beb9-4bf8-a28b-8da265e60aa6"]]
{"ide":{"node":{"7c75350c-beb9-4bf8-a28b-8da265e60aa6":{"position":{"vector":[-2497,1126]},"visualization":{"show":false,"width":414.83538651790013,"height":166.2797622020428}}},"widget":{},"snapshot":"","import":{}}}