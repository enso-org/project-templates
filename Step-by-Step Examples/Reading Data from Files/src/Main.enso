from Standard.Base import all
from Standard.Table import all
from Standard.Database import all
from Standard.AWS import all
from Standard.Geo import all
from Standard.Google import all
from Standard.Microsoft import all
from Standard.Snowflake import all
from Standard.Tableau import all
import Standard.Examples
import Standard.Visualization
from Standard.Base.Meta import Enso_Project



## ![image](/images/step-by-step-example.png)

   # Reading Data from Files in Enso Analytics

   The Data Input components in Enso Analytics provide a comprehensive set of tools for importing data from file-based formats such as CSV and Excel into a unified table format, facilitating seamless integration into data preparation and analysis workflows. This example focuses on file-based data input using components like `Data.read`, `read_many`, and `Data.list`, offering flexible options for reading single files, specific sheets, named ranges, or multiple files, with support for skipping rows, limiting row counts, and unioning datasets. Enso's ability to read from databases and Web APIs will be covered in separate examples. Note that users would typically browse for files on their local machine or in the Enso Cloud; for this example, the files are bundled into the project file to simplify the demonstration.

   ## Key Components

   ### Data.read

   The `Data.read` component imports data from a single file, such as a CSV or Excel workbook, into Enso Analytics, with options to customize the reading process.

   - **Functionality**: Reads a file from a specified path within the project (e.g., `enso_project.data/`), supporting formats like CSV and Excel. For Excel files, it can target specific sheets, named ranges, or the entire workbook, with options to skip rows or limit the number of rows read.
   - **Use Case**: Load a CSV file like `salesforce_customers_2024.csv` or an Excel sheet from `salesforce_customers_2024.xlsx`, optionally skipping the first 3 rows or limiting to the first 25 rows for performance during workflow development.
   - **Benefit**: Offers precise control over file input, with error reporting (e.g., warnings for problematic rows) while continuing processing, ensuring robust data ingestion.

   ### read_many

   The `read_many` component processes multiple datasets, such as Excel worksheets or a list of files, and combines them into a single unified table or handles them individually.

   - **Functionality**: Reads multiple sheets from an Excel workbook or multiple files and unions them into a single table, automatically adding a `Sheet Name` column to track data sources when reading multiple sheets. Users can specify sheets or files explicitly, dynamically select subsets, or read all sheets/files, with options to return a merged table based on all columns, common columns, or a predefined list.
   - **Use Case**: Union specific sheets (`2024_01`, `2024_02`, `2024_03`) from `Transactions_2024.xlsx`, combine CSV files like `2024_01.csv` and `2024_03.csv`, or merge files with varying columns (e.g., `Approval User` in later files) into a superset or subset table.
   - **Benefit**: Simplifies the consolidation of multiple datasets, ensuring consistent column alignment and traceability, with flexibility to handle diverse column structures.

   ### Data.list

   The `Data.list` component retrieves a list of file paths matching a specified pattern, enabling dynamic file-based input for `read_many`.

   - **Functionality**: Generates a list of files from a directory within the project (e.g., `enso_project.data/`) based on a pattern (e.g., `2024_*.csv`), which can be sorted, filtered, or processed before passing to `read_many` for unioning.
   - **Use Case**: Identify all CSV files matching `2024_*.csv`, sort them, and select files for unioning, or use the list to merge files with varying column sets.
   - **Benefit**: Enables dynamic and automated file discovery, streamlining workflows involving multiple files.

   ## Supported Data Sources

   - **Files**: Enso supports reading from file formats like CSV and Excel (.xlsx), making it easy to import structured data from local or cloud storage within the project.
   - **Databases**: Enso can connect to and read from various databases (e.g., SQL Server, PostgreSQL, Snowflake) using appropriate connection parameters (covered in separate examples).
   - **Web APIs**: Enso supports data retrieval from Web APIs, enabling users to fetch real-time or external data from RESTful endpoints or other API sources (covered in separate examples).

   ## Example Workflow

   In this example workflow, various file-based data input techniques are applied to CSV and Excel files bundled in the project:

   - **Reading a CSV File**: Use `Data.read` to load `salesforce_customers_2024.csv` with default options, noting warnings for problematic rows that allow processing to continue.
   - **Reading a Single Excel Sheet**: Use `Data.read` with `..Sheet 'Sheet 1'` to load `Sheet 1` from `salesforce_customers_2024.xlsx`.
   - **Skipping Rows in Excel**: Use `Data.read` with `skip_rows=3` to skip the first 3 rows of `Sheet 1` in `salesforce_customers_2024.xlsx`, ignoring irrelevant header data.
   - **Limiting Rows in Excel**: Use `Data.read` with `skip_rows=3` and `row_limit=(..First 25)` to read only the first 25 rows of `Sheet 1`for faster workflow development.
   - **Reading a Named Range**: Use `Data.read` with `..Range 'NamedRangeExample'` to load a named range from `salesforce_customers_2024.xlsx`.
   - **Reading Individual Excel Sheets**: Use `Data.read` to load `Transactions_2024.xlsx`, then apply `read` to access specific sheets (`2024_01`, `2024_02`, `2024_03`) individually, with double-clicking on a sheet name automatically adding a new `read`component.
   - **Unioning Specific Excel Sheets**: Use `read_many` with a list of sheet names (`2024_01`, `2024_02`, `2024_03`) to union them into a single table, adding a `Sheet Name` column.
   - **Unioning All Excel Sheets**: Use `read_many` without specifying sheets to union all worksheets in `Transactions_2024.xlsx`into a single table.
   - **Unioning Last N Excel Sheets**: Use `Data.read` to load `Transactions_2024.xlsx`, retrieve sheet names with `sheet_names`, sort them with `sort`, take the last 3 with `take (..Last 3)`, and pass to `read_many` to union them.
   - **Reading Specific Row Ranges from Multiple Sheets**: Use `Data.read` to load `Transactions_2024.xlsx`, get sheet names, create Excel range syntax (e.g., `'2024_01'!5:14`) to read rows 5-14 from each sheet, union them with `read_many`, and rename columns (defaulting to A, B, C, etc.) by transposing the first row of one sheet as headers.
   - **Reading a CSV with Options**: Use `Data.read` with `..Delimited skip_rows=3` to read `salesforce_customers_2024.csv`, skipping the first 3 rows.
   - **Unioning CSV Files by Pattern**: Use `Data.list` to find files matching `2024_*.csv` within `enso_project.data/`, then pass the list to `read_many` to union them, handling a superset of columns (e.g., `Approval User` in later files).
   - **Unioning with Common Columns Only**: Use `read_many` with `vector4` and `return=(..As_Merged_Table ..In_All)` to union CSV files, returning only columns present in all files.
   - **Unioning with Specified Column List**: Use `read_many` with `vector4` and `return=(..As_Merged_Table (..In_List node4))` to union CSV files, limiting to a predefined column list (e.g., `Transaction ID`, `Date`, etc.).
   - **Unioning Specific CSV Files**: Use `read_many` with a list of `Data.read` calls for specific CSV files (`2024_01.csv`, `2024_03.csv`, repeated for demonstration) and `..Delimited` to union them.

   ## Use Cases

   - **Importing CSV Data**: Load a CSV file like `salesforce_customers_2024.csv` for customer analysis, handling warnings gracefully.
   - **Reading Specific Excel Sheets**: Import a single sheet from an Excel file to focus on specific data, such as a particular month's transactions.
   - **Skipping Irrelevant Data**: Skip header rows or metadata in Excel or CSV files to focus on relevant data.
   - **Optimizing Workflow Development**: Limit the number of rows read from an Excel sheet to improve performance during testing.
   - **Accessing Named Ranges**: Read a predefined named range in an Excel file for targeted data extraction.
   - **Consolidating Multiple Files or Sheets**: Union multiple Excel sheets or CSV files (e.g., monthly transaction data) into a single table for aggregated analysis.
   - **Dynamic File Selection**: Use `Data.list` to dynamically identify and process files matching a pattern, such as all 2024 CSV files.
   - **Selective Row Reading**: Read specific row ranges from multiple Excel sheets and union them, useful for extracting subsets.
   - **Handling Variable Column Sets**: Use `read_many` with `..In_All` or `..In_List` to manage datasets with differing structures.

   ## Benefits

   The file-based Data Input components in Enso Analytics provide a versatile and efficient approach to importing and consolidating CSV and Excel data, complemented by support for databases and Web APIs (covered in separate examples). The `Data.read` component offers fine-grained control over file input, with options to skip rows, limit row counts, or target specific sheets and named ranges. The `read_many` component simplifies the unioning of multiple datasets, adding traceability with a `Sheet Name` column and handling variable column sets, while `Data.list` enables dynamic file discovery. These components integrate seamlessly with Enso’s ecosystem, supporting further processing with components like `filter`, `select`, or visualization tools (accessible via the eyeball icon) for immediate data inspection. By streamlining file-based data ingestion and enabling advanced techniques like row-range selection and column renaming, these components empower users to efficiently prepare and analyze diverse datasets in Enso Analytics.
main =
    text1 = "Excel Examples"
    text2 = "CSV examples"
    node4 = Table.input [['Column List', ['Transaction ID', 'Type', 'Date', 'Period', 'Document Number', 'Status', 'Posting', 'Entity', 'Account Number', 'Account Name', 'Memo', 'Item', 'Item Description', 'Quantity', 'Unit of Measure', 'Unit Price', 'Currency', 'Exchange Rate to USD']]]
    ## Excel File - Read a Named Range
    any9 = Data.read enso_project.data/'salesforce_customers_2024.xlsx'  (..Range 'NamedRangeExample')
    ## Excel File - Read a Single Sheet, skipping the first 3 rows as they contained irrelevant data.
    any7 = Data.read enso_project.data/'salesforce_customers_2024.xlsx'  (..Sheet 'Sheet 1' skip_rows=3)
    ## Excel File - Read a Single Sheet, skipping the first 3 rows as they contained irrelevant data. Limit to just the first 25 rows. This can be useful when developing a workflow to improve performance
    any8 = Data.read enso_project.data/'salesforce_customers_2024.xlsx'  (..Sheet 'Sheet 1' skip_rows=3 row_limit=(..First 25))
    ## Excel File - Read a Single Sheet
    any5 = Data.read enso_project.data/'salesforce_customers_2024.xlsx' format=(..Sheet 'Sheet 1')
    ## Read rows 5-14 from each sheet in an Excel Workbook, and union them together as a single table
    any13 = Data.read enso_project.data/'Transactions_2024.xlsx'
    vector5 = any13.sheet_names
    table4 = vector5.to_table
    ## Create Excel Ranges to feed into read_many. Excel range syntax looks like this: '2024_01'!A1:E5 or '2024_01!1:5 which reads all columns in rows 1-5
    table5 = table4.set (expr ' "\'"+[Value] + "\'!5:14"') "Value"
    ## This table has lost the column headers from the Excel Worksheet because we did not start at row 1. The columns are labeled as A, B, C, etc.
    table6 = any13.read_many table5
    ## Read the headers (note chossing `No_Headers` so that the first row is kept as values)
    table8 = any13.read '2024_01' ..No_Headers (..First 1)
    ## Transpose the table
    any14 = table8.transpose value_column_name="New Name"
    ## Final Table with columns named correctly.
    table7 = table6.rename_columns any14
    ## Read the last 3 sheets from an Excel Workbook, and union them together as a single table
    any3 = Data.read enso_project.data/'Transactions_2024.xlsx'
    vector1 = any3.sheet_names
    vector2 = vector1.sort Sort_Direction.Ascending
    vector3 = vector2.take (..Last 3)
    ## By getting the list of sheet names, sorting them, and taking the last 3 we are passing in a dynamic list into the list of sheet names 
    table3 = any3.read_many vector3
    ## Read all sheets from an Excel Workbook, and union them together as a single table
    any2 = Data.read enso_project.data/'Transactions_2024.xlsx'
    ## By not specifying any sheets, all sheets are read and unioned together
    table2 = any2.read_many
    ## Read multiple sheets from an Excel Workbook, and union them together as a single table
    any1 = Data.read enso_project.data/'Transactions_2024.xlsx'
    ## read_many automatically adds a new column named Sheet Name to allow you to track the source of the data
    table1 = any1.read_many ['2024_01', '2024_02', '2024_03']
    ## Read multiple sheets from an Excel Workbook, individually. By double clicking on the worksheet name, Enso will automatically add a new read component for that Worksheet
    any6 = Data.read enso_project.data/'Transactions_2024.xlsx'
    node1 = any6.read '2024_01'
    node2 = any6.read '2024_02'
    node3 = any6.read '2024_03'
    ## Read a CSV file and set options by choosing the format of Delimited from the list. You can now skip rows and enable many other options specific to delimited files.
    any10 = Data.read enso_project.data/'salesforce_customers_2024.csv' (..Delimited skip_rows=3)
    ## Read a CSV file with default options - notice the warning indicated by the yellow triangle to the left of the component, and the warning message below the componentwhen it is selected letting you know that one of the rows has an issue. The default for warnings is to report the issue but continue on. 
    any4 = Data.read enso_project.data/'salesforce_customers_2024.csv'
    ## Read and Union CSV files based on a file pattern into a single unified table. First get the list of files.
    vector4 = Data.list enso_project.data "2024_*.csv"
    ## Pass the list into the paths argument to read and union the entire list. The last 3 months of 2024 have one additional column that was not present in the first 9 files named Approval User. The default setting brings in the superset of columns.
    any11 = Data.read_many vector4
    ## Only return columns that are found in all files
    any15 = Data.read_many vector4 return=(..As_Merged_Table ..In_All)
    ## Only return columns found in a list of columns
    any16 = Data.read_many vector4  return=(..As_Merged_Table (..In_List node4))
    ## Read and Union specified CSV files into a single unified table
    any12 = Data.read_many [enso_project.data/'2024_01.csv',enso_project.data/'2024_02.csv',enso_project.data/'2024_03.csv'] ..Delimited



#### METADATA ####
[[{"index":{"value":10001},"size":{"value":16}},"034d1b9d-9755-4a97-9dd2-75926c487467"],[{"index":{"value":10030},"size":{"value":14}},"0beefa3e-d344-4295-ba46-2131c48a76ef"],[{"index":{"value":10057},"size":{"value":276}},"005b207a-8aa4-49e1-804e-ec82c43b9f53"],[{"index":{"value":10384},"size":{"value":91}},"98b2aaf2-09fc-41d4-a9fc-fa8cdbc6d38a"],[{"index":{"value":10589},"size":{"value":93}},"5c30d68d-e09f-4004-8856-58ee7c25a3e5"],[{"index":{"value":10898},"size":{"value":116}},"62d8b6da-8060-4542-9c08-96bc79ddaea8"],[{"index":{"value":11066},"size":{"value":9}},"deb0e9e7-8a28-40fb-a365-e840bb29e7f6"],[{"index":{"value":11066},"size":{"value":60}},"3234117f-4995-4059-94ce-40a0b7bddbd8"],[{"index":{"value":11066},"size":{"value":87}},"24b9f439-0d99-4182-ac5d-fb8e9436059e"],[{"index":{"value":11268},"size":{"value":52}},"0cb2da4f-4887-4e17-a333-a41ae1a390d2"],[{"index":{"value":11335},"size":{"value":17}},"233c0d40-e775-4cbf-a159-fdb3942c92a6"],[{"index":{"value":11366},"size":{"value":16}},"d5acaf7e-b222-4890-8e8b-8d8c602951dd"],[{"index":{"value":11551},"size":{"value":10}},"d4122921-96b5-49f4-b2ff-4daf1ef2914d"],[{"index":{"value":11551},"size":{"value":45}},"ba662807-e55d-4a8b-8011-4ab8cfa8efdf"],[{"index":{"value":11551},"size":{"value":53}},"5d39d1b7-4403-4388-86c6-eeec0c6d0f21"],[{"index":{"value":11765},"size":{"value":15}},"f17f9c28-0a84-40b7-abde-b7b32719bae0"],[{"index":{"value":11765},"size":{"value":22}},"08e1bd5b-28f3-45f8-a4c8-b813d0e27653"],[{"index":{"value":11894},"size":{"value":10}},"bba006cf-eb23-40e9-ad00-18719cd7c14b"],[{"index":{"value":11894},"size":{"value":20}},"41135d6c-b651-4689-b900-3f4d4d5c227d"],[{"index":{"value":11894},"size":{"value":33}},"8b756274-8379-49ef-aba1-d9207ecbfdd9"],[{"index":{"value":11894},"size":{"value":45}},"9b7d380c-5c9d-4f43-aa09-f79f1ac36cb6"],[{"index":{"value":11979},"size":{"value":16}},"5631cd8c-309f-4e00-bc62-65e18972f730"],[{"index":{"value":11979},"size":{"value":45}},"ddf103d8-8609-4b36-af34-12b545ff108a"],[{"index":{"value":12087},"size":{"value":21}},"08c2fb1e-ce4f-4a7c-b353-4c5f74db2c4d"],[{"index":{"value":12087},"size":{"value":27}},"083e8536-0dbc-4d42-9561-5197ecf19517"],[{"index":{"value":12222},"size":{"value":52}},"3ed13c24-02dd-485d-8051-5060c6b9374a"],[{"index":{"value":12289},"size":{"value":16}},"17ec160a-052f-46bd-a960-42eeea64ca4b"],[{"index":{"value":12320},"size":{"value":12}},"c02dabc0-f01d-44a2-bd9d-08aa7b042303"],[{"index":{"value":12320},"size":{"value":37}},"40957658-b190-425a-804a-827592de53fa"],[{"index":{"value":12372},"size":{"value":12}},"fc3e8a08-677a-45e1-b53d-6d1c40b8f0e3"],[{"index":{"value":12372},"size":{"value":23}},"4fee01a6-ef35-4977-868c-54ac52160003"],[{"index":{"value":12551},"size":{"value":14}},"6e499310-601c-486b-b202-4c621714add1"],[{"index":{"value":12551},"size":{"value":22}},"6d54c180-ac05-4535-ac79-cb260c055bdb"],[{"index":{"value":12674},"size":{"value":52}},"015ca75c-7915-47e4-a982-049974a2bea0"],[{"index":{"value":12818},"size":{"value":14}},"652713e3-939b-4860-9f83-d6cbbc64dd74"],[{"index":{"value":12938},"size":{"value":9}},"fea893bd-a624-4558-9977-b9dc514f8e43"],[{"index":{"value":12938},"size":{"value":52}},"b41f5f89-6950-4282-8adb-7a43fca5b122"],[{"index":{"value":13115},"size":{"value":14}},"88a4582c-c081-4d61-a688-e81a01b64672"],[{"index":{"value":13115},"size":{"value":48}},"9e38c741-17bc-4f8e-93e7-92a2c03349d7"],[{"index":{"value":13351},"size":{"value":9}},"138d9167-b4be-4ff2-a00c-7dfd1b9672f4"],[{"index":{"value":13351},"size":{"value":52}},"6c602036-7833-46ea-8ae5-359b3b4b7ed8"],[{"index":{"value":13416},"size":{"value":19}},"cd34d16f-f79c-4e37-a67e-be4fcc5d8653"],[{"index":{"value":13448},"size":{"value":19}},"b7d1c8a8-9e48-415a-8386-ee87cbf38027"],[{"index":{"value":13480},"size":{"value":19}},"0b587eaa-2c13-4ae3-987e-e01c7d000114"],[{"index":{"value":13683},"size":{"value":59}},"39f9306a-0a56-4bf8-8c28-184c61b2dba3"],[{"index":{"value":13683},"size":{"value":85}},"56ebe8fd-54c8-4166-81f3-23aff632d3b2"],[{"index":{"value":14089},"size":{"value":9}},"48f503f9-79de-413c-9a54-bf75808cd0a6"],[{"index":{"value":14089},"size":{"value":59}},"2083c85d-2812-4db5-958b-bded55b60c32"],[{"index":{"value":14277},"size":{"value":9}},"fa2365d8-fd79-44c0-aa08-f74e8ebe857d"],[{"index":{"value":14277},"size":{"value":27}},"4ba0a6cb-d5a7-40b9-91b9-a44cfdbe7e31"],[{"index":{"value":14277},"size":{"value":40}},"b7a01654-da89-41a7-ba4b-d8459713a806"],[{"index":{"value":14581},"size":{"value":14}},"c3791732-2aa1-4a7e-a3d9-3e2edef5fb30"],[{"index":{"value":14581},"size":{"value":22}},"d523a871-eb61-44b2-88af-6c6d448dc972"],[{"index":{"value":14671},"size":{"value":22}},"cb21ab8c-fbaf-48c1-a2a0-0d34105525e6"],[{"index":{"value":14671},"size":{"value":58}},"4b6e8ebe-216b-4ba4-b57f-ed6c535e9196"],[{"index":{"value":14796},"size":{"value":68}},"5d3edf67-e69a-4d5a-a1bc-2e4128b21746"],[{"index":{"value":14947},"size":{"value":14}},"89894dbc-887e-4c7c-9eb0-733946dc9c01"],[{"index":{"value":14947},"size":{"value":112}},"b04386ee-0099-4353-a4c2-c70ec30d1e19"],[{"index":{"value":14947},"size":{"value":124}},"0cc47c17-1c50-4c8c-9fd2-fdc23eaf8579"]]
{"ide":{"node":{"034d1b9d-9755-4a97-9dd2-75926c487467":{"position":{"vector":[-1459,871]}},"0beefa3e-d344-4295-ba46-2131c48a76ef":{"position":{"vector":[-264,871]}},"005b207a-8aa4-49e1-804e-ec82c43b9f53":{"position":{"vector":[462,-908]}},"98b2aaf2-09fc-41d4-a9fc-fa8cdbc6d38a":{"position":{"vector":[-1848,-368]},"visualization":{"show":true,"width":1086.365234375,"height":236.2947998046875}},"5c30d68d-e09f-4004-8856-58ee7c25a3e5":{"position":{"vector":[-1848,364]},"visualization":{"show":true,"width":1086.365234375,"height":236.2947998046875}},"62d8b6da-8060-4542-9c08-96bc79ddaea8":{"position":{"vector":[-1848,-7]},"visualization":{"show":true,"width":1086.365234375,"height":236.2947998046875}},"24b9f439-0d99-4182-ac5d-fb8e9436059e":{"position":{"vector":[-1848,720]},"visualization":{"show":true,"width":1086.365234375,"height":236.2947998046875}},"3234117f-4995-4059-94ce-40a0b7bddbd8":{"position":{"vector":[-1258,511]}},"deb0e9e7-8a28-40fb-a365-e840bb29e7f6":{"position":{"vector":[-1258,511]}},"0cb2da4f-4887-4e17-a333-a41ae1a390d2":{"position":{"vector":[-1838,-3292]},"visualization":{"show":true}},"233c0d40-e775-4cbf-a159-fdb3942c92a6":{"position":{"vector":[-1542,-3514]}},"d5acaf7e-b222-4890-8e8b-8d8c602951dd":{"position":{"vector":[-1542,-3586]}},"5d39d1b7-4403-4388-86c6-eeec0c6d0f21":{"position":{"vector":[-1552,-3693]},"visualization":{"show":true}},"ba662807-e55d-4a8b-8011-4ab8cfa8efdf":{"position":{"vector":[-867,-2771]}},"d4122921-96b5-49f4-b2ff-4daf1ef2914d":{"position":{"vector":[-867,-2771]}},"08e1bd5b-28f3-45f8-a4c8-b813d0e27653":{"position":{"vector":[-1833,-3915]},"visualization":{"show":true,"width":870.8357747395833}},"f17f9c28-0a84-40b7-abde-b7b32719bae0":{"position":{"vector":[-867,-2896]}},"9b7d380c-5c9d-4f43-aa09-f79f1ac36cb6":{"position":{"vector":[-1696,-4137]}},"8b756274-8379-49ef-aba1-d9207ecbfdd9":{"position":{"vector":[-1698,-4116]}},"41135d6c-b651-4689-b900-3f4d4d5c227d":{"position":{"vector":[-1702,-4120]}},"bba006cf-eb23-40e9-ad00-18719cd7c14b":{"position":{"vector":[-1702,-4120]}},"ddf103d8-8609-4b36-af34-12b545ff108a":{"position":{"vector":[-1696,-4232]}},"5631cd8c-309f-4e00-bc62-65e18972f730":{"position":{"vector":[-1696,-4232]}},"083e8536-0dbc-4d42-9561-5197ecf19517":{"position":{"vector":[-1833,-4342]},"visualization":{"show":true,"width":897.7823215060764}},"08c2fb1e-ce4f-4a7c-b353-4c5f74db2c4d":{"position":{"vector":[-1838,-4169]}},"3ed13c24-02dd-485d-8051-5060c6b9374a":{"position":{"vector":[-1848,-2382]},"visualization":{"show":true}},"17ec160a-052f-46bd-a960-42eeea64ca4b":{"position":{"vector":[-1401,-2604]}},"40957658-b190-425a-804a-827592de53fa":{"position":{"vector":[-1401,-2676]}},"c02dabc0-f01d-44a2-bd9d-08aa7b042303":{"position":{"vector":[-1156,-2835]}},"4fee01a6-ef35-4977-868c-54ac52160003":{"position":{"vector":[-1401,-2757]}},"fc3e8a08-677a-45e1-b53d-6d1c40b8f0e3":{"position":{"vector":[-1156,-2916]}},"6d54c180-ac05-4535-ac79-cb260c055bdb":{"position":{"vector":[-1848,-2862]},"visualization":{"show":true,"width":741.4939371744791}},"6e499310-601c-486b-b202-4c621714add1":{"position":{"vector":[-1847,-2916]},"visualization":{"show":true,"width":477.6314697265625}},"015ca75c-7915-47e4-a982-049974a2bea0":{"position":{"vector":[-1833,-1791]},"visualization":{"show":true}},"652713e3-939b-4860-9f83-d6cbbc64dd74":{"position":{"vector":[-1833,-2022]},"visualization":{"show":true,"width":477.6314697265625}},"b41f5f89-6950-4282-8adb-7a43fca5b122":{"position":{"vector":[-1848,-1253]},"visualization":{"show":true}},"fea893bd-a624-4558-9977-b9dc514f8e43":{"position":{"vector":[-1848,-1253]},"visualization":{"show":true}},"9e38c741-17bc-4f8e-93e7-92a2c03349d7":{"position":{"vector":[-1848,-1500]},"visualization":{"show":true}},"88a4582c-c081-4d61-a688-e81a01b64672":{"position":{"vector":[-1848,-1484]}},"6c602036-7833-46ea-8ae5-359b3b4b7ed8":{"position":{"vector":[-1848,-720]},"visualization":{"show":true}},"138d9167-b4be-4ff2-a00c-7dfd1b9672f4":{"position":{"vector":[-1848,-720]},"visualization":{"show":true}},"cd34d16f-f79c-4e37-a67e-be4fcc5d8653":{"position":{"vector":[-1848,-942]},"visualization":{"show":true}},"b7d1c8a8-9e48-415a-8386-ee87cbf38027":{"position":{"vector":[-1624,-942]},"visualization":{"show":true}},"0b587eaa-2c13-4ae3-987e-e01c7d000114":{"position":{"vector":[-1401,-942]},"visualization":{"show":true}},"56ebe8fd-54c8-4166-81f3-23aff632d3b2":{"position":{"vector":[-497,364]},"visualization":{"show":true,"width":787.8385416666666}},"39f9306a-0a56-4bf8-8c28-184c61b2dba3":{"position":{"vector":[-497,364]},"visualization":{"show":true,"width":745.2093098958334}},"2083c85d-2812-4db5-958b-bded55b60c32":{"position":{"vector":[-497,720]},"visualization":{"show":true,"width":745.2093098958334}},"48f503f9-79de-413c-9a54-bf75808cd0a6":{"position":{"vector":[-806,430]}},"b7a01654-da89-41a7-ba4b-d8459713a806":{"position":{"vector":[-497,-283]},"visualization":{"show":true,"width":699.24072265625}},"4ba0a6cb-d5a7-40b9-91b9-a44cfdbe7e31":{"position":{"vector":[-505,128]}},"fa2365d8-fd79-44c0-aa08-f74e8ebe857d":{"position":{"vector":[-505,128]}},"d523a871-eb61-44b2-88af-6c6d448dc972":{"position":{"vector":[-497,-570]},"visualization":{"show":true,"width":762.2442220052084}},"c3791732-2aa1-4a7e-a3d9-3e2edef5fb30":{"position":{"vector":[-497,-159]}},"4b6e8ebe-216b-4ba4-b57f-ed6c535e9196":{"position":{"vector":[-514,-823]},"visualization":{"show":true,"width":762.2442220052084}},"cb21ab8c-fbaf-48c1-a2a0-0d34105525e6":{"position":{"vector":[-514,-1013]},"visualization":{"show":true,"width":762.2442220052084}},"5d3edf67-e69a-4d5a-a1bc-2e4128b21746":{"position":{"vector":[-514,-1106]},"visualization":{"show":true,"width":762.2442220052084}},"0cc47c17-1c50-4c8c-9fd2-fdc23eaf8579":{"position":{"vector":[-497,65]},"visualization":{"show":true}},"b04386ee-0099-4353-a4c2-c70ec30d1e19":{"position":{"vector":[-497,65]}},"89894dbc-887e-4c7c-9eb0-733946dc9c01":{"position":{"vector":[-459,65]}}},"widget":{},"import":{},"snapshot":"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"}}