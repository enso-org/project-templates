from Standard.Base import all
from Standard.Table import all
from Standard.Database import all
from Standard.AWS import all
from Standard.Geo import all
from Standard.Google import all
from Standard.Microsoft import all
from Standard.Snowflake import all
from Standard.Tableau import all
import Standard.Examples
import Standard.Visualization
from Standard.Base.Meta import Enso_Project





## ![image](/images/step-by-step-example.png)
   # Joining Data in Enso Analytics

   The Join component in Enso Analytics provides a versatile set of tools for combining data from two tables based on various join types, enabling users to merge datasets for comprehensive analysis, reporting, or visualization. The primary components, join, zip, merge, and cross_join, support multiple strategies for combining datasets, including Inner, Left Outer, Right Outer, Full, Left Exclusive, Right Exclusive, Join Between, Join by Record Position, Merge, and Cross Join, each tailored to specific data integration needs. These components are essential for integrating related data from different sources or tables within a workflow.

   ## Key Components

   ### join

   The join component merges two tables based on specified conditions or positional alignment, with options to define the join type and join criteria.

   - **Functionality**: Combines rows from two tables using a specified join type and condition(s), such as equality between columns (e.g., CustomerID and ID) or range-based matching (e.g., OrderDate between StartDate and EndDate). Supports single or multiple column joins and positional joins using zip, with automatic joining on identically named columns when no conditions are specified.
   - **Use Case**: Merge a customer table with a signup table using an Inner Join on CustomerID and ID, or combine an orders table with a promotions table using a Join Between to match OrderDate within StartDate and EndDateranges, or perform an automatic Inner Join on matching column names like CustomerID.
   - **Benefit**: Offers a flexible and powerful way to integrate datasets, accommodating various join strategies to meet diverse analytical requirements, with automatic column matching simplifying common use cases.
   - **Downside**: Complex joins with multiple conditions or large datasets may require careful optimization to avoid performance issues, and misaligned data types or missing keys can lead to unexpected nulls or exclusions.

   ### zip

   The zip component merges two tables by aligning rows based on their sequential position.

   - **Functionality**: Combines rows from two tables by pairing row 1 of the left table with row 1 of the right table, row 2 with row 2, and so forth, regardless of column values.
   - **Use Case**: Merge survey responses with demographic data where rows are already aligned by order, ensuring each response pairs with the correct demographic record.
   - **Benefit**: Simplifies merging datasets with identical row counts and aligned structures without requiring key columns.
   - **Downside**: Requires tables to have the same number of rows and correct alignment, as misaligned data can lead to incorrect pairings.

   ### merge

   The merge component updates values in a table by replacing matching values from a lookup table based on a specified key column.

   - **Functionality**: Performs a find-and-replace operation, updating fields in the input table with values from the lookup table where the key column matches (e.g., updating Amount in an input table based on matching ID values).
   - **Use Case**: Update an input table’s Amount column with new values from a lookup table where ID matches, ensuring the latest data is reflected without altering non-matching rows.
   - **Benefit**: Simplifies targeted updates to specific columns while preserving the structure of the input table.
   - **Downside**: Limited to updating existing columns and requires exact matches in the key column, which may exclude unmatched rows from updates.

   ### cross_join

   The cross_join component creates a Cartesian product, combining each row of the left table with every row of the right table.

   - **Functionality**: Generates all possible combinations of rows from two tables, duplicating rows in the left table for each row in the right table (e.g., pairing each customer record with every month).
   - **Use Case**: Combine a customer table with a table of months to create a dataset with every customer-month combination for time-based analysis.
   - **Benefit**: Ideal for scenarios requiring exhaustive combinations, such as generating templates for forecasting or planning.
   - **Downside**: Can result in very large datasets, especially with large input tables, potentially impacting performance.

   ## Supported Join Types

   - **Inner Join**: Returns only the rows where there is a match in both tables based on the join condition.
   - **Left Outer Join**: Returns all rows from the left table and matching rows from the right table, with nulls for non-matching rows in the right table.
   - **Right Outer Join**: Returns all rows from the right table and matching rows from the left table, with nulls for non-matching rows in the left table.
   - **Full Join**: Returns all rows from both tables, with nulls in places where there is no match in the other table.
   - **Left Exclusive Join**: Returns only the rows from the left table that do not have a match in the right table based on the join condition, excluding matched rows.
   - **Right Exclusive Join**: Returns only the rows from the right table that do not have a match in the left table based on the join condition, excluding matched rows.
   - **Join Between**: Returns rows where a value in one table falls within a range defined by two columns in another table, unique to Enso Analytics for simplified range-based joins.
   - **Join by Record Position**: Combines two tables by aligning and merging rows based on their sequential position (e.g., row 1 of the left table with row 1 of the right table), using the zip component.
   - **Merge**: Updates values in the input table’s columns with values from a lookup table based on a matching key column, acting like a find-and-replace operation.
   - **Cross Join**: Combines every row from the left table with every row from the right table, creating all possible row combinations.

   ## Supported Features

   - **Single-Column Joins**: Join tables based on a single column condition, such as ..Equals 'CustomerID' 'ID', or automatically on identically named columns.
   - **Multi-Column Joins**: Join tables based on multiple column conditions, such as ..Equals 'FirstName' and ..Equals 'LastName'.
   - **Range-Based Joins**: Use ..Between to match a value (e.g., OrderDate) within a range (e.g., StartDate to EndDate).
   - **Positional Joins**: Use zip to merge tables by record position, aligning rows based on their order.
   - **Merge Operations**: Use merge to update specific columns in an input table based on matching keys from a lookup table.
   - **Cross Joins**: Use cross_join to generate all possible row combinations between two tables.
   - **Null Handling**: Supports null values (Nothing) in join conditions, with behavior defined by the join type (e.g., nulls in Left Outer Join result in nulls from the right table).
   - **Integration with Enso Ecosystem**: Joined tables integrate seamlessly with other components like remove_columns, filter, or visualization tools.
   - **Visualization Support**: Built-in table visualization (accessible via the eyeball icon) allows users to inspect join, merge, or cross_join results immediately.

   ## Example Workflow

   In this example workflow, multiple join types, merge, and cross_join operations are applied to various datasets:

   - **Inner Join by a Single Column**: Use join ..Inner to combine node4 (customer data) with node3 (signup data) on CustomerID and ID, returning only matching rows (e.g., CustomerID 42, 8, 98, 112, 12, 6), then remove the redundant ID column.
   - **Left Outer Join by a Single Column**: Use join ..Left_Outer to include all rows from node4 with matches from node3, filling non-matching rows (e.g., 14, 34) with nulls for signup data, then remove ID.
   - **Right Outer Join by a Single Column**: Use join ..Right_Outer to include all rows from node3 with matches from node4, filling non-matching rows (e.g., 99) with nulls for customer data, then remove ID.
   - **Full Join by a Single Column**: Use join ..Full to include all rows from both node4 and node3, with nulls where no match exists, then remove ID.
   - **Left Exclusive Join by a Single Column**: Use join ..Left_Exclusive to return only rows from node4 with no match in node3 (e.g., 14, 34), excluding matched rows.
   - **Right Exclusive Join by a Single Column**: Use join ..Right_Exclusive to return only rows from node3 with no match in node4 (e.g., 99), excluding matched rows.
   - **Join Between**: Use join ..Left_Outer with ..Between 'OrderDate' 'StartDate' 'EndDate' to match node2 (orders) with node1 (promotions) where OrderDate falls within StartDate and EndDate (e.g., 2025-01-05 matches Winter Sale), retaining all orders and adding promo data, then remove StartDate and EndDate.
   - **Join by Record Position**: Use zip to merge node8 and node7 by aligning rows based on position, duplicating columns like FirstName and LastName, then use remove_columns with (regex '^Right .*') to clean up any unintended duplicates.
   - **Automatic Inner Join on First Column**: Use join ..Inner on node10 and node9, automatically joining on the first column (CustomerID) since names match identically, and removing the duplicate CustomerID column from node9in one step.
   - **Merge by a Single Column**: Use merge to update any1 (input table) with values from any2 (lookup table) based on matching ID values, replacing Amount values in any1 (e.g., ID 1’s Amount updated from 145 to 266), leaving non-matching rows unchanged.
   - **Cross Join**: Use cross_join to combine any3 (customer data) with any4 (months), creating a dataset where each customer record is paired with every month (e.g., 4 customers × 12 months = 48 rows), useful for time-series analysis.

   ## Use Cases

   - **Matching Customer Data**: Use Inner Join to combine customer details with signup dates where CustomerIDmatches ID, or use automatic Inner Join on matching column names.
   - **Preserving All Customers**: Use Left Outer Join to include all customers, even those without signup data, for a complete view.
   - **Preserving All Signups**: Use Right Outer Join to include all signups, even those without customer details, for tracking.
   - **Comprehensive Merge**: Use Full Join to see all data from both tables, identifying unmatched records.
   - **Excluding Matches**: Use Left Exclusive Join to find customers without signup data for follow-up.
   - **Identifying Unmatched Signups**: Use Right Exclusive Join to find signups without customer records for validation.
   - **Range-Based Matching**: Use Join Between to link orders to active promotions based on date ranges.
   - **Positional Alignment**: Use Join by Record Position to merge parallel datasets (e.g., survey responses with demographic data) by order.
   - **Updating Specific Columns**: Use merge to update fields like Amount in an input table with values from a lookup table based on a key like ID.
   - **Generating All Combinations**: Use cross_join to create every possible combination of rows, such as pairing customers with all months for forecasting.

   ## Benefits

   The Join, Zip, Merge, and Cross Join components in Enso Analytics provide a comprehensive and efficient way to combine tables, supporting a wide range of strategies to meet diverse data integration needs. The join component’s flexibility with single and multi-column conditions, range-based joins, and positional alignment via zip ensures robust data combination, while the automatic join feature on identically named columns simplifies common tasks. The zip component enables straightforward positional merging for aligned datasets, merge supports targeted updates to specific columns, and cross_join facilitates exhaustive row combinations for advanced analysis. Integration with other Enso components, such as remove_columns, filter, or visualization tools (accessible via the eyeball icon), allows for immediate inspection and further processing. By enabling precise and versatile data merging, these components empower users to create integrated, analysis-ready datasets in Enso Analytics.
main =
    node3 = Table.input [['ID', ['42', '8', '98', '112', '12', '6', '99']], ['Signup Date', ['2024-09-22', '2019-08-12', '2021-07-21', '2023-05-10', '2024-04-12', '2022-03-29', '2021-06-13']]]
    node4 = Table.input [['CustomerID', ['42', '8', '14', '34', '98', '112', '12', '6']], ['FirstName', ['James', 'Sophia', 'Liam', 'Olivia', 'Ethan', 'Ava', 'Noah', 'Mia']], ['LastName', ['Hart', 'Lopez', 'Nguyen', 'Brown', 'Garcia', 'Kim', Nothing, 'Johnson']], ['Gender', ['M', 'F', 'M', 'F', 'M', 'F', 'M', 'F']], ['Region', ['North', 'South', 'East', 'West', 'Midwest', 'North', 'South', 'West']], ['Score', ['12', '7', '3', '18', '5', '9', '1', '14']]]
    ## Inner Join by a Single Column.  Inner Join: Returns only the rows where there is a match in both tables based on the join condition.
    table2 = node4.join node3 ..Inner [(..Equals 'CustomerID' 'ID')]
    ## Remove the ID column as it has the same value as the CustoemrID column. 
    table3 = table2.remove_columns ['ID']
    ## Left Outer Join by a Single Column. Left Join: Returns all rows from the left table and matching rows from the right table, with nulls for non-matching rows in the right table.
    table1 = node4.join node3 ..Left_Outer [(..Equals 'CustomerID' 'ID')]
    ## Remove the ID column as it has the same value as the CustoemrID column. 
    table4 = table1.remove_columns ['ID']
    ## Right Outer Join by a Single Column. Right Join: Returns all rows from the right table and matching rows from the left table, with nulls for non-matching rows in the left table.
    table5 = node4.join node3 ..Right_Outer [(..Equals 'CustomerID' 'ID')]
    ## Remove the ID column as it has the same value as the CustoemrID column. 
    table6 = table5.remove_columns ['ID']
    ## Full Join by a Single Column. Full Join: Returns all rows from both tables, with nulls in places where there is no match in the other table.
    table7 = node4.join node3 ..Full [(..Equals 'CustomerID' 'ID')]
    ## Remove the ID column as it has the same value as the CustoemrID column. 
    table8 = table7.remove_columns ['ID']
    ## Left Exclusive a Single Column. Left Exclusive Join: Returns only the rows from the left table that do not have a match in the right table based on the join condition, excluding matched rows.
    table9 = node4.join node3 ..Left_Exclusive [(..Equals 'CustomerID' 'ID')]
    ## Right Exclusive Join by a Single Column. Right Exclusive Join: Returns only the rows from the right table that do not have a match in the left table based on the join condition, excluding matched rows.
    table10 = node4.join node3 ..Right_Exclusive [(..Equals 'CustomerID' 'ID')]
    node1 = Table.input [['PromoID', ['P1', 'P2', 'P3', 'P4']], ['PromoName', ['Winter Sale', 'Spring Discount', 'Summer Campaign', 'Fall Flash']], ['StartDate', ['2025-01-01', '2025-03-01', '2025-06-01', '2025-09-01']], ['EndDate', ['2025-01-15', '2025-03-31', '2025-06-30', '2025-09-15']]]
    node2 = Table.input [['OrderID', [ '1', '2', '3', '4', '5', '6', '7']], ['CustomerName', [ 'Alice', 'Bob', 'Charlie', 'Diana', 'Eve', 'Frank', 'Grace']], ['OrderDate', ['2025-01-05', '2025-02-10', '2025-03-15', '2025-04-20', '2025-05-25', '2025-06-30', '2025-07-12']]]
    ## Join Between: Returns rows where a value in one table falls within a range defined by two columns in another table, unique to Enso Analytics for simplified range-based joins.  Here is an example of a Left Outer join because we want all rows returned, adding the promo code
    table11 = node2.join node1 ..Left_Outer [..Between 'OrderDate' 'StartDate' 'EndDate']
    ## Remove the extra columns added in the join between
    table12 = table11.remove_columns ['StartDate', 'EndDate']
    ## Left Exclusive a Single Column. Left Exclusive Join: Returns only the rows from the left table that do not have a match in the right table based on the join condition, excluding matched rows.
    table13 = node4.join node3 ..Inner [(..Equals 'CustomerID' 'ID')]
    ## Right Exclusive Join by a Single Column. Right Exclusive Join: Returns only the rows from the right table that do not have a match in the left table based on the join condition, excluding matched rows.
    table14 = node4.join node3 ..Right_Exclusive [(..Equals 'CustomerID' 'ID')]
    node5 = Table.input [['FirstName', ['James', 'Sophia', 'Liam', 'Olivia', 'Ethan', 'Ava', 'Noah', 'Mia']], ['LastName', ['Hart', 'Lopez', 'Nguyen', 'Brown', 'Garcia', 'Kim', Nothing, 'Johnson']], ['JoinDate', ['2025-01-05', '2025-02-10', '2025-03-15', '2025-04-20', '2025-05-25', '2025-06-30', '2025-07-12', '2025-09-04']]]
    node6 = Table.input [['CustomerID', ['42', '8', '14', '34', '98', '112', '12', '6']], ['FirstName', ['James', 'Sophia', 'Liam', 'Olivia', 'Ethan', 'Ava', 'Noah', 'Mia']], ['LastName', ['Hart', 'Lopez', 'Nguyen', 'Brown', 'Garcia', 'Kim', Nothing, 'Johnson']], ['Gender', ['M', 'F', 'M', 'F', 'M', 'F', 'M', 'F']], ['Region', ['North', 'South', 'East', 'West', 'Midwest', 'North', 'South', 'West']], ['Score', ['12', '7', '3', '18', '5', '9', '1', '14']]]
    ## Join on multiple columns (FirstName and Lastname)
    table15 = node6.join node5 ..Inner [(..Equals 'FirstName'), (..Equals 'LastName')]
    node7 = Table.input [['FirstName', ['James', 'Sophia', 'Liam', 'Olivia', 'Ethan', 'Ava', 'Noah', 'Mia']], ['LastName', ['Hart', 'Lopez', 'Nguyen', 'Brown', 'Garcia', 'Kim', Nothing, 'Johnson']], ['JoinDate', ['2025-01-05', '2025-02-10', '2025-03-15', '2025-04-20', '2025-05-25', '2025-06-30', '2025-07-12', '2025-09-04']]]
    node8 = Table.input [['CustomerID', ['42', '8', '14', '34', '98', '112', '12', '6']], ['FirstName', ['James', 'Sophia', 'Liam', 'Olivia', 'Ethan', 'Ava', 'Noah', 'Mia']], ['LastName', ['Hart', 'Lopez', 'Nguyen', 'Brown', 'Garcia', 'Kim', Nothing, 'Johnson']], ['Gender', ['M', 'F', 'M', 'F', 'M', 'F', 'M', 'F']], ['Region', ['North', 'South', 'East', 'West', 'Midwest', 'North', 'South', 'West']], ['Score', ['12', '7', '3', '18', '5', '9', '1', '14']]]
    ## Join by record position. The first row in the left table joins to the first row in the right table, and so forth. Enso does this using the zip component
    table16 = node8.zip node7
    ## Remove duplicated columns by using a regular expression. This gets rid of all columns that start with the word Right
    table17 = table16.remove_columns [(regex '^Right .*')]
    node9 = Table.input [['CustomerID', ['42', '8', '98', '112', '12', '6', '99']], ['Signup Date', ['2024-09-22', '2019-08-12', '2021-07-21', '2023-05-10', '2024-04-12', '2022-03-29', '2021-06-13']]]
    node10 = Table.input [['CustomerID', ['42', '8', '14', '34', '98', '112', '12', '6']], ['FirstName', ['James', 'Sophia', 'Liam', 'Olivia', 'Ethan', 'Ava', 'Noah', 'Mia']], ['LastName', ['Hart', 'Lopez', 'Nguyen', 'Brown', 'Garcia', 'Kim', Nothing, 'Johnson']], ['Gender', ['M', 'F', 'M', 'F', 'M', 'F', 'M', 'F']], ['Region', ['North', 'South', 'East', 'West', 'Midwest', 'North', 'South', 'West']], ['Score', ['12', '7', '3', '18', '5', '9', '1', '14']]]
    ## Inner Join on the first column in both tables: If the names match identically, Enso automatically joins on this column and removes matching column names in one step
    table18 = node10.join node9 ..Inner
    ## Input Table
    any1 = Table.input [['ID', ['1', '2', '3', '4']], ['Name', ['Mark Smith', 'Beth Johnson', 'Andy Jackson', 'Fred McIlroy']], ['Amount', ['145', '198', '204', '188']]]
    ## Lookup Table
    any2 = Table.input [['ID', ['1', '3', '4']], ['Amount', ['266', '536', '422']]]
    ## Merge is similar to a find and replace. When there is a match, the value is replaced in the field(s) that match from the Lookup Table
    table19 = any1.merge any2 ['ID']
    ## Input Table
    any3 = Table.input [['ID', ['1', '2', '3', '4']], ['Name', ['Mark Smith', 'Beth Johnson', 'Andy Jackson', 'Fred McIlroy']], ['Amount', ['145', '198', '204', '188']]]
    any4 = Table.input [['Month', ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']]]
    ## cross_join creates duplicate rows for each value in the right table. In this case, 12 rows representing each month is created for everyh record in the left (input) table.
    table20 = any3.cross_join any4



#### METADATA ####
[[{"index":{"value":12602},"size":{"value":180}},"89ca6823-ef77-4b43-887f-b076acaa2811"],[{"index":{"value":12795},"size":{"value":446}},"002eb2a4-d766-4b5e-bae7-23b1ecba1d4d"],[{"index":{"value":13395},"size":{"value":10}},"fa29eafc-aaae-404a-8c62-cb99183025d8"],[{"index":{"value":13395},"size":{"value":16}},"e17fbc59-ac3a-472b-9f92-594702324230"],[{"index":{"value":13395},"size":{"value":24}},"b54b93a4-bcc3-44a9-9efd-9a2ad642c6a5"],[{"index":{"value":13395},"size":{"value":55}},"0f8e8680-0368-41ba-89a4-c3b7b326813f"],[{"index":{"value":13544},"size":{"value":21}},"63f1bd1a-e8e8-403a-8b6d-3493045fea22"],[{"index":{"value":13544},"size":{"value":28}},"64be3b50-072f-4b65-9aa5-52d0d47fdc3b"],[{"index":{"value":13770},"size":{"value":60}},"0a001d8a-06e4-4efb-8989-e7913a17f4c6"],[{"index":{"value":13924},"size":{"value":28}},"d0846c33-ad39-44a7-b1be-acc7d770d190"],[{"index":{"value":14151},"size":{"value":61}},"3731082a-9ad5-478f-b109-97ba1c6109bf"],[{"index":{"value":14306},"size":{"value":28}},"f7ec7a7e-9b8f-489f-8cad-4b1baf3a20e7"],[{"index":{"value":14496},"size":{"value":54}},"8e597568-222a-4e9e-af71-87d1dd72e310"],[{"index":{"value":14644},"size":{"value":28}},"92e47a5c-beea-4e9b-90be-5aee0493b59b"],[{"index":{"value":14885},"size":{"value":64}},"dd8a4488-3fb6-46d5-ad34-dee7bbdaf14e"],[{"index":{"value":15173},"size":{"value":65}},"70266fce-87c2-41c0-81e1-4e5e9c148843"],[{"index":{"value":15251},"size":{"value":279}},"767431c3-96d6-4470-9926-9c21b8718b8e"],[{"index":{"value":15543},"size":{"value":260}},"69efff30-8e00-4e0d-88dc-02ec3c3299ff"],[{"index":{"value":16098},"size":{"value":10}},"39d8494d-b173-4fba-adb7-702995189ab7"],[{"index":{"value":16098},"size":{"value":16}},"8a4dc898-af26-498d-8660-036e08fbd412"],[{"index":{"value":16098},"size":{"value":29}},"e2d098ea-e120-4e49-a745-b04105c7497e"],[{"index":{"value":16098},"size":{"value":75}},"e0ffe21f-1b7c-42d3-8f29-58b40c94554e"],[{"index":{"value":16246},"size":{"value":22}},"883982cb-b0c0-43d0-899a-8eea68d4e3ec"],[{"index":{"value":16246},"size":{"value":47}},"a198f43e-b77f-4952-99b9-3753799b58d3"],[{"index":{"value":16507},"size":{"value":55}},"6fc4ffc1-f72b-423d-b8ec-31907c71d63b"],[{"index":{"value":16786},"size":{"value":65}},"1403ec28-981e-4439-9d98-3078e69e1472"],[{"index":{"value":16864},"size":{"value":314}},"7f0077e2-a14d-4d61-b449-4c61470eefef"],[{"index":{"value":17191},"size":{"value":446}},"89362da5-4729-4729-93b6-f7c2284c5641"],[{"index":{"value":17709},"size":{"value":10}},"3024ae33-70ec-47fe-b897-06f83e96d1e8"],[{"index":{"value":17709},"size":{"value":16}},"1a1e7fcb-e374-4de4-b244-1271902014eb"],[{"index":{"value":17709},"size":{"value":24}},"78c1cc24-1d57-4d76-b028-3c7540a384ff"],[{"index":{"value":17709},"size":{"value":72}},"93aca6e1-5cd3-449c-949f-dad635d264e0"],[{"index":{"value":17794},"size":{"value":314}},"8f7fa45d-c2e9-4e6e-bb8a-fcd4dd49494d"],[{"index":{"value":18121},"size":{"value":446}},"812fe4a6-1230-4a62-aa50-7ea031627b38"],[{"index":{"value":18742},"size":{"value":9}},"72b31bf7-d717-4a63-887b-2c11d7ee4a61"],[{"index":{"value":18742},"size":{"value":15}},"dfcc880d-b7ec-4724-b730-9024cc6e418d"],[{"index":{"value":18896},"size":{"value":22}},"e17c6657-9655-4d6e-a6be-7381d0ef75ed"],[{"index":{"value":18896},"size":{"value":44}},"4580f48e-6d9e-448d-8a7b-824aeb1f80a0"],[{"index":{"value":18953},"size":{"value":188}},"88384e98-5ce9-498f-978d-0dd3808fd9ba"],[{"index":{"value":19155},"size":{"value":446}},"57534ded-a6d7-477e-b8eb-2bd394928c2c"],[{"index":{"value":19788},"size":{"value":11}},"67e91e56-2aba-45e7-becc-78da29a0eb87"],[{"index":{"value":19788},"size":{"value":17}},"a8de9d10-ff4c-4430-9fb3-aae574a6a4dd"],[{"index":{"value":19788},"size":{"value":25}},"2010a91f-71a8-4dc1-8ecf-9a0d48ab3617"],[{"index":{"value":19844},"size":{"value":11}},"f53ea403-9fb8-473c-8052-7a65e4834e13"],[{"index":{"value":19844},"size":{"value":158}},"8bba0787-e3a0-45e7-b84d-1ae13683257d"],[{"index":{"value":20034},"size":{"value":72}},"faae824a-2ffe-4cce-b9fc-46869faeb669"],[{"index":{"value":20262},"size":{"value":10}},"ab642fe0-0907-4946-82e1-5b364670933d"],[{"index":{"value":20262},"size":{"value":15}},"523fe94f-bc20-4273-94f6-e2b99bf72f83"],[{"index":{"value":20262},"size":{"value":22}},"1d694180-6fd0-4fec-85a7-55c04ac2b922"],[{"index":{"value":20315},"size":{"value":158}},"cd48cd1c-dca6-4672-8951-4d6f175fa0da"],[{"index":{"value":20485},"size":{"value":11}},"ee4b3516-7a46-4d2d-969b-a80907c936e2"],[{"index":{"value":20485},"size":{"value":147}},"d1da5530-6abe-4654-b5fd-dbfb040986f6"],[{"index":{"value":20825},"size":{"value":15}},"fe1e534a-3a97-4cba-bd2f-9de9d9edb4ef"],[{"index":{"value":20825},"size":{"value":20}},"d4f10532-e91c-4115-8dfa-6d56f3c929cd"]]
{"ide":{"node":{"89ca6823-ef77-4b43-887f-b076acaa2811":{"position":{"vector":[-1474,-1795]}},"002eb2a4-d766-4b5e-bae7-23b1ecba1d4d":{"position":{"vector":[-1863,-1544]}},"0f8e8680-0368-41ba-89a4-c3b7b326813f":{"position":{"vector":[-1035,-2062]},"visualization":{"show":false,"width":1189.3444769976945}},"b54b93a4-bcc3-44a9-9efd-9a2ad642c6a5":{"position":{"vector":[-578,-2067]}},"e17fbc59-ac3a-472b-9f92-594702324230":{"position":{"vector":[-578,-2067]}},"fa29eafc-aaae-404a-8c62-cb99183025d8":{"position":{"vector":[-578,-2067]}},"64be3b50-072f-4b65-9aa5-52d0d47fdc3b":{"position":{"vector":[-1035,-2135]},"visualization":{"show":true,"width":1171.5049285040513,"height":242.4385101899954}},"63f1bd1a-e8e8-403a-8b6d-3493045fea22":{"position":{"vector":[-529,-2288]}},"0a001d8a-06e4-4efb-8989-e7913a17f4c6":{"position":{"vector":[-1035,-2548]},"visualization":{"show":false,"width":1189.3444769976945}},"d0846c33-ad39-44a7-b1be-acc7d770d190":{"position":{"vector":[-1035,-2621]},"visualization":{"show":true,"width":1171.5049285040513,"height":326.4090440627947}},"3731082a-9ad5-478f-b109-97ba1c6109bf":{"position":{"vector":[-1035,-3095]},"visualization":{"show":false,"width":1189.3444769976945}},"f7ec7a7e-9b8f-489f-8cad-4b1baf3a20e7":{"position":{"vector":[-1035,-3167]},"visualization":{"show":true,"width":1171.5049285040513,"height":326.4090440627947}},"8e597568-222a-4e9e-af71-87d1dd72e310":{"position":{"vector":[-1035,-3663]},"visualization":{"show":false,"width":1189.3444769976945}},"92e47a5c-beea-4e9b-90be-5aee0493b59b":{"position":{"vector":[-1035,-3735]},"visualization":{"show":true,"width":1171.5049285040513,"height":326.4090440627947}},"dd8a4488-3fb6-46d5-ad34-dee7bbdaf14e":{"position":{"vector":[-1035,-4250]},"visualization":{"show":true,"width":1189.3444769976945}},"70266fce-87c2-41c0-81e1-4e5e9c148843":{"position":{"vector":[-1035,-4503]},"visualization":{"show":true,"width":1189.3444769976945}},"767431c3-96d6-4470-9926-9c21b8718b8e":{"position":{"vector":[569,-3124]}},"69efff30-8e00-4e0d-88dc-02ec3c3299ff":{"position":{"vector":[543,-2897]}},"e0ffe21f-1b7c-42d3-8f29-58b40c94554e":{"position":{"vector":[1185,-3363]},"visualization":{"show":false,"width":1154.2852055159367,"height":302.020741397581}},"e2d098ea-e120-4e49-a745-b04105c7497e":{"position":{"vector":[-997,-5020]}},"8a4dc898-af26-498d-8660-036e08fbd412":{"position":{"vector":[-999,-4990]}},"39d8494d-b173-4fba-adb7-702995189ab7":{"position":{"vector":[-999,-4990]}},"a198f43e-b77f-4952-99b9-3753799b58d3":{"position":{"vector":[1185,-3469]},"visualization":{"show":true,"width":1072.7874207059942,"height":302.12653381323423}},"883982cb-b0c0-43d0-899a-8eea68d4e3ec":{"position":{"vector":[-1035,-5409]}},"6fc4ffc1-f72b-423d-b8ec-31907c71d63b":{"position":{"vector":[-1035,-4783]},"visualization":{"show":true,"width":1189.3444769976945}},"1403ec28-981e-4439-9d98-3078e69e1472":{"position":{"vector":[-1035,-5142]},"visualization":{"show":true,"width":1189.3444769976945}},"7f0077e2-a14d-4d61-b449-4c61470eefef":{"position":{"vector":[693,-1575]}},"89362da5-4729-4729-93b6-f7c2284c5641":{"position":{"vector":[569,-1346]}},"93aca6e1-5cd3-449c-949f-dad635d264e0":{"position":{"vector":[1287,-1742]},"visualization":{"show":true,"height":205.68290226998437}},"78c1cc24-1d57-4d76-b028-3c7540a384ff":{"position":{"vector":[-1249,-5752]}},"1a1e7fcb-e374-4de4-b244-1271902014eb":{"position":{"vector":[-1249,-5752]}},"3024ae33-70ec-47fe-b897-06f83e96d1e8":{"position":{"vector":[-1249,-5752]}},"8f7fa45d-c2e9-4e6e-bb8a-fcd4dd49494d":{"position":{"vector":[843,-2291]}},"812fe4a6-1230-4a62-aa50-7ea031627b38":{"position":{"vector":[718,-2062]}},"dfcc880d-b7ec-4724-b730-9024cc6e418d":{"position":{"vector":[1245,-2481]},"visualization":{"show":true,"width":1792.8654374970274}},"72b31bf7-d717-4a63-887b-2c11d7ee4a61":{"position":{"vector":[-1496,-6411]}},"4580f48e-6d9e-448d-8a7b-824aeb1f80a0":{"position":{"vector":[1239,-2755]},"visualization":{"show":true,"width":957.5219177944815}},"e17c6657-9655-4d6e-a6be-7381d0ef75ed":{"position":{"vector":[-1496,-6636]}},"88384e98-5ce9-498f-978d-0dd3808fd9ba":{"position":{"vector":[-1676,-1170]}},"57534ded-a6d7-477e-b8eb-2bd394928c2c":{"position":{"vector":[-2065,-919]}},"2010a91f-71a8-4dc1-8ecf-9a0d48ab3617":{"position":{"vector":[-1035,-1368]},"visualization":{"show":true,"width":944.4052734374999}},"a8de9d10-ff4c-4430-9fb3-aae574a6a4dd":{"position":{"vector":[-1121,-1293]}},"67e91e56-2aba-45e7-becc-78da29a0eb87":{"position":{"vector":[-1121,-1293]}},"8bba0787-e3a0-45e7-b84d-1ae13683257d":{"position":{"vector":[616,-3936]}},"f53ea403-9fb8-473c-8052-7a65e4834e13":{"position":{"vector":[616,-3936]}},"faae824a-2ffe-4cce-b9fc-46869faeb669":{"position":{"vector":[938,-4196]}},"1d694180-6fd0-4fec-85a7-55c04ac2b922":{"position":{"vector":[616,-4472]},"visualization":{"show":true,"width":1048.4916409165112,"height":201.94510844216416}},"523fe94f-bc20-4273-94f6-e2b99bf72f83":{"position":{"vector":[616,-4472]}},"ab642fe0-0907-4946-82e1-5b364670933d":{"position":{"vector":[616,-4472]}},"cd48cd1c-dca6-4672-8951-4d6f175fa0da":{"position":{"vector":[627,-4985]}},"d1da5530-6abe-4654-b5fd-dbfb040986f6":{"position":{"vector":[973,-5183]}},"ee4b3516-7a46-4d2d-969b-a80907c936e2":{"position":{"vector":[973,-5183]}},"d4f10532-e91c-4115-8dfa-6d56f3c929cd":{"position":{"vector":[669,-5419]},"visualization":{"show":true,"width":674.6832512243469,"height":250.93101387593282}},"fe1e534a-3a97-4cba-bd2f-9de9d9edb4ef":{"position":{"vector":[678,-5538]}}},"widget":{"89ca6823-ef77-4b43-887f-b076acaa2811":{"WidgetTableEditor":{"size":{"x":271.8845621744792,"y":115.41994380900447}}},"002eb2a4-d766-4b5e-bae7-23b1ecba1d4d":{"WidgetTableEditor":{"size":{"x":621.0308911218258,"y":150}}},"767431c3-96d6-4470-9926-9c21b8718b8e":{"WidgetTableEditor":{"size":{"x":552.5568386622765,"y":150}}},"69efff30-8e00-4e0d-88dc-02ec3c3299ff":{"WidgetTableEditor":{"size":{"x":440.6872771488055,"y":150}}},"7f0077e2-a14d-4d61-b449-4c61470eefef":{"WidgetTableEditor":{"size":{"x":390.04297824721374,"y":129.17617609035153}}},"89362da5-4729-4729-93b6-f7c2284c5641":{"WidgetTableEditor":{"size":{"x":614.6609734944626,"y":150}}},"8f7fa45d-c2e9-4e6e-bb8a-fcd4dd49494d":{"WidgetTableEditor":{"size":{"x":200,"y":139.60198046076923}}},"88384e98-5ce9-498f-978d-0dd3808fd9ba":{"WidgetTableEditor":{"size":{"x":301.32633463541674,"y":150}}},"57534ded-a6d7-477e-b8eb-2bd394928c2c":{"WidgetTableEditor":{"size":{"x":529.1589219835071,"y":150}}},"8bba0787-e3a0-45e7-b84d-1ae13683257d":{"WidgetTableEditor":{"size":{"x":556.8030513934234,"y":150}}},"faae824a-2ffe-4cce-b9fc-46869faeb669":{"WidgetTableEditor":{"size":{"x":530.3834829757462,"y":150}}}},"snapshot":"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","import":{}}}