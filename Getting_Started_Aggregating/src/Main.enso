from Standard.Base import all
from Standard.Table import all
from Standard.Database import all
from Standard.AWS import all
from Standard.Google_Api import all
import Standard.Visualization

## ![Image](eags.png)

   # Aggregating and Pivoting Data

   In this scenario, we want to look at calculating the number of accounts by type and by currency.

   ### 

   ## 🗝️ **Objective 1:**  Lets read a single sheet in from Excel (Review from previous example):

   1️⃣        Drag the **sample_bank_data.xlsx** workbook on to the canvas. This adds a ***Data.read*** component to the workflow.

   ### THE FILE CAN BE FOUND HERE:
   **Windows - C:\Users\<username>\Documents\enso-projects\Samples\Data\sample_bank_data.xlsx**


   **Mac & Linux - ~/Documents/enso-projects/Samples/Data/sample_bank_data.xlsx**



   2️⃣        Add a new component after the ***Data.read*** component by either dragging from the output port (the bottom edge) of the `Data.read` component, or clicking the ➕ button on the Data.readcomponent.

   - Choose the ***read*** component
   - Click on **query** then choose Sheet1

   ### 

   ## 🗝️ **Objective 2:**  Aggregating by Account Type (Product Name):

   The first task is to add an aggregate component grouped by [product_name] and create a new column of data that summarizes the count of records for each Account Type.

   1️⃣        Add a new component after the ***read*** component by either dragging from the output port (the bottom edge) of the ***read*** component, or clicking the ➕ button on the component.

   2️⃣        Choose the ***aggregate*** component (Begin typing the term aggregate or sum) and hit enter or left-click on the ***aggregate*** component.

   - Click the group_by argument then choose [product_name]
   - Click on the [➕] symbol (to the right of the columns  argument)
   - This will add the default of “Count”.  *Note:  If you click on “Count”, you will see other options for aggregation.*
   - You can open the visualization (<>) and see the count of 1,026 Savings Accounts, as we saw in the prior example, along with counts for the 3 other products:
   ![Image](/images/image_2.png)



   ## 🗝️ **Objective 3:**  Sort/Order the aggregated counts in descending order of [Count]

   1️⃣        Add a ***sort*** component after the ***aggregate*** component.

   - Click on the [➕] symbol on the columns argument.
   - Click on the [product_name] and change it to Count (dropdown or typing).
   - Click on direction argument and choose Descending from the dropdown list. (Savings Account will now be at the bottom of the list as #3).
   ![Image](/images/image_3.png)


   ## 🗝️ **Objective 4:**  Create table of currencies by product names

   For each product name create a distinct count of accounts within each of the currency codes (from previous exercise we examined 3-digit currency codes with one (1) exception accouant).

   1️⃣        Add a new ***cross_tab*** component after the ***read*** component.

   A cross tab allows us to create a column for each domain value for a given field (in this case [currency_code]).

   - Click on the group_by argument and choose [product_name].
   - Click on the names argument and choose [currency_code].
   - Click on the values argument and select “Count_Distinct”.
   - Click on the [➕] symbol and add the [account_id] field.
   When we complete this objective, you’ll have 4 rows with 5 columns of data.


   ![Image](/images/image_5.png)


   ## 🗝️ **Objective 5:**  Create table of account statuses by currency_code

   For each currency code create a distinct count of accounts within each of the account statuses.  In this data, you’ll find that there is at least one account status that has a ‘dirty’ value.  For extra credit, you can cleanse that status (See next Objective).

   1️⃣        Add a new ***cross_tab*** component after the ***read*** component.

   Create the configuration properly and you will see the four (4) currency values and the three (3) account statuses.  Let’s guide you through the extra credit assignment. ![image](4by3.png)

   🗝️ **Objective 5 Extra Credit:**  Create table of account statuses by a cleansed currency code field.  You’ll want to convert any “C” statuses to “Closed” prior to the ***cross_tab*** component.  You can accomplish this by:

   1️⃣       Add a new ***set*** component (set can be used to update values in an existing field or to add new fields to the incoming data) after the ***read*** component.

   2️⃣        Configure the ***set*** component to update “C” values to “Closed”


   ![Image](/images/2a.gif)


   - Click on the value argument and choose <Simple Expression>.
   - Click on the input argument and choose the [account_status] column.
   - Click on the operation argument and choose the “if” operation.
   - Click on the condition argument and choose the "Equals" option.
   - On the to argument click and choose the  <Text Value> option and type the letter C between the quote marks.
   - Click on the true_value argument and choose the <Text Value> option.
   - Type the word “Closed” between the quote marks.
   - Click on the false_value argument and select the [account_status] column.
   - Click on the double-quotes (following the word as) and type the column name “account_status”
   3️⃣       Change the input connection on the ***cross_tab*** from the first step of this objective with the output from the ***set*** component.


   ![Image](/images/2b%20-reconnect.gif)


   Your result should look like the following: 


   ![Image](/images/image.png)


   # **Bonus**

   **Fix the currency_code that is G, which needs to be updated to GBP by adding a new** *set* **component as below:**

   ![Image](/images/image_1.png)
main =
    text1 = "Aggregating and Pivoting Data"



#### METADATA ####
[[{"index":{"value":5752},"size":{"value":31}},"97d15141-d528-48a5-99c8-2b959863d6ac"]]
{"ide":{"node":{"97d15141-d528-48a5-99c8-2b959863d6ac":{"position":{"vector":[-88,418]}}},"widget":{},"import":{},"snapshot":"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"}}