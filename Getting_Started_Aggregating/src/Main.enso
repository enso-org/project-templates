from Standard.Base import all
from Standard.Table import all
from Standard.Database import all
from Standard.AWS import all
from Standard.Google_Api import all
import Standard.Visualization

## ![Image](eags.png)

   # Aggregating and Pivoting Data

   In this scenario, we want to look at calculating the number of accounts by type and by currency.

   ### 

   ## 🗝️ **Objective 1:**  Lets read a single sheet in from Excel (Review from previous example):

   1️⃣        Drag the **sample_bank_data.xlsx** workbook on to the canvas. This adds a ***Data.read*** component to the workflow.

   2️⃣        Add a new component after the ***Data.read*** component by either dragging from the output port (the bottom edge) of the `Data.read` component, or clicking the ➕ button on the Data.readcomponent.

   - Choose the ***read*** component
   - Click on **query** then choose Sheet1

   ### 

   ## 🗝️ **Objective 2:**  Aggregating by Account Type (Product Name):

   The first task is to add an aggregate component grouped by [product_name] and create a new column of data that summarizes the count of records for each Account Type.

   1️⃣        Add a new component after the ***read*** component by either dragging from the output port (the bottom edge) of the ***read*** component, or clicking the ➕ button on the component.

   2️⃣        Choose the ***aggregate*** component (Begin typing the term aggregate or sum) and hit enter or left-click on the ***aggregate*** component.

   - Click the group_by argument then choose [product_name]
   - Click on the [➕] symbol (to the right of the columns  argument)
   - This will add the default of “Count”.  *Note:  If you click on “Count”, you will see other options for aggregation.*
   - You can open the visualization (<>) and see the count of 1,026 Savings Accounts, as we saw in the prior example, along with counts for the 3 other products:

   ![Image](/images/image_2.png)



   ## 🗝️ **Objective 3:**  Sort/Order the aggregated counts in descending order of [Count]

   1️⃣        Add a ***sort*** component after the ***aggregate*** component.

   - Click on the [➕] symbol on the columns argument.
   - Click on the [product_name] and change it to Count (dropdown or typing).
   - Click on direction argument and choose Descending from the dropdown list. (Savings Account will now be at the bottom of the list as #3).
   ![Image](/images/image_3.png)


   ## 🗝️ **Objective 4:**  Create table of currencies by product names

   For each product name create a distinct count of accounts within each of the currency codes (from previous exercise we examined 3-digit currency codes with one (1) exception accouant).

   1️⃣        Add a new ***cross_tab*** component after the ***read*** component.

   A cross tab allows us to create a column for each domain value for a given field (in this case [currency_code]).

   - Click on the group_by argument and choose [product_name].
   - Click on the names argument and choose [currency_code].
   - Click on the values argument and select “Count_Distinct”.
   - Click on the [➕] symbol and add the [account_id] field.
   When we complete this objective, you’ll have 4 rows with 5 columns of data.


   ![Image](/images/image_5.png)


   ## 🗝️ **Objective 5:**  Create table of account statuses by currency_code

   For each currency code create a distinct count of accounts within each of the account statuses.  In this data, you’ll find that there is at least one account status that has a ‘dirty’ value.  For extra credit, you can cleanse that status (See next Objective).

   1️⃣        Add a new ***cross_tab*** component after the ***read*** component.

   Create the configuration properly and you will see the four (4) currency values and the three (3) account statuses.  Let’s guide you through the extra credit assignment. ![image](4by3.png)

   🗝️ **Objective 5 Extra Credit:**  Create table of account statuses by a cleansed currency code field.  You’ll want to convert any “C” statuses to “Closed” prior to the ***cross_tab*** component.  You can accomplish this by:

   1️⃣       Add a new ***set*** component (set can be used to update values in an existing field or to add new fields to the incoming data) after the ***read*** component.

   2️⃣        Configure the ***set*** component to update “C” values to “Closed”


   ![Image](/images/2a.gif)


   - Click on the value argument and choose <Simple Expression>.
   - Click on the input argument and choose the [account_status] column.
   - Click on the operation argument and choose the “if” operation.
   - Click on the condition argument and choose the "Equals" option.
   - On the to argument click and choose the  <Text Value> option and type the letter C between the quote marks.
   - Click on the true_value argument and choose the <Text Value> option.
   - Type the word “Closed” between the quote marks.
   - Click on the false_value argument and select the [account_status] column.
   - Click on the double-quotes (following the word as) and type the column name “account_status”
   3️⃣       Change the input connection on the ***cross_tab*** from the first step of this objective with the output from the ***set*** component.


   ![Image](/images/2b%20-reconnect.gif)


   Your result should look like the following: 


   ![Image](/images/image.png)


   # **Bonus**

   **Fix the currency_code that is G, which needs to be updated to GBP by adding a new** *set* **component as below:**

   ![Image](/images/image_1.png)
main =
    text1 = "Aggregating and Pivoting Data"



#### METADATA ####
[[{"index":{"value":5535},"size":{"value":31}},"97d15141-d528-48a5-99c8-2b959863d6ac"]]
{"ide":{"node":{"97d15141-d528-48a5-99c8-2b959863d6ac":{"position":{"vector":[-88,418]}}},"widget":{},"snapshot":"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","import":{}}}