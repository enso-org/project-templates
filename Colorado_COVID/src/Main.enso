from Standard.Base import all
from Standard.Table import all
from Standard.Database import all
from Standard.AWS import all
import Standard.Visualization

## ![Image](eaep.png)
   
   # Colorado COVID Example
   
   ## Project Overview
   
   This workflow analyses the cases of COVID across all counties in the state of Colorado.
   
   The data has been downloaded as a CSV from the public health site in Colorado. The dates are from March 15, 2020 to December 14, 2022.
   
   ![Image](table1.png)
   
   ## Project Goals
   
   **Goal 1** - Summarize the data for each date to give us total cases across the State of Colorado, the maximum by county, and totals for each county.
   
   **Goal 2** - Create a map that shows the cases for a specified date, where a larger circle represents a larger number of cases. Each circle should be in the center of each county.
   
   ## Here are the steps we took to solve this problem
   
   ### Goal 1 - summarize the data for each date to give us total cases across the State of Colorado, the maximum by county, and totals for each county.
   
   1️⃣ Open the csv file with the CDPHE_COVID19_County_Status_Metrics. Here, the file is embedded into this project. Typically, you would drag the file onto the canvas (the background) from your computer to add the file to the project, or click where you see the word 'path' shown in the ***Data.read*** component to bring up a file browser.
   
   2️⃣ Notice the **T** at the top of the [date] column in the ***Data.read*** component. This indicates that it is in a text format, rather than a date format. We need to convert the text-based [date] column to a date formatted [date] column. We use the ***parse*** component to do this, and we provide the format. The dates are in a US format so we use MM/dd/yyyy as our format. Notice the calendar icon now appearing at the top of the [date] column.
   
   3️⃣ The input data has many columns. We only need a few for our analysis so we select just the columns that we want using the ***select*** component.
   
   4️⃣ Change the column names to capitalize the first letter, and to simplify the last column name to [Cases].
   
   5️⃣ Convert the [Cases] column from a floating point number to an integer. This will make the tables below much nicer to read.
   
   6️⃣ For each day, summarize the total number of cases across the entire state, and calculate the  maximum number of cases for the most affected county on that day.
   
   7️⃣ Calculate the number of cases for each county for each day.
   
   8️⃣ Join the ***aggregate*** result for statewide results with the ***cross_tab*** result with cases for each of the counties for each day into a single table.
   
   9️⃣ Sort the joined data by the [Date] from earliest to latest.
   
   ![Image](table2.png)
   
   ### **Goal 2** - Create a map that shows the cases for a specified date, where a larger circle represents a larger number of cases. Each circle should be in the center of each county.
   
   1️⃣ Read the SQLite file that has the latitude & longitude of each county. Here, the file is embedded into this project.
   
   2️⃣ Query the datababase to get the values for [COUNTY], [CENT_LAT], [CENT_LONG]
   
   3️⃣ Rename the columns to give them friendlier names: [County], [Latitude], [Longitude].
   
   4️⃣ The query and the rename_columns were operations that were pushed back into the database (or IN_DB). This read component pulls the data into Enso's in-memory engine for further processing.
   
   5️⃣ Create an input date for the day we want displayed on the map. We have chosen February 2, 2022. Try changing the date to any date in the range of March 15, 2020 to December 14, 2022 to see the map update.
   
   6️⃣ Filter the COVID Case Data to a specific date.
   
   7️⃣ Set the radius of the circles at the center of each county to a radius of the  number of cases * 10. Try modifying this to see larger or smaller circles on the map.
   
   8️⃣ Join the COVID case date for the specific date with the latitude and longitude of the center of each county. This allows us to represent the data on a map! You can see on February 13, 2022, the cases were highest in the southeast part of the state.
   
   ![Image](map.png)
   
   
   
   
   
main =
    ## The data has contains COVID case data for Colorado Countires. It has been downloaded as a CSV from the public health site in Colorado.
    operator8 = enso_project.data/"CDPHE_COVID19_County_Status_Metrics.csv"
    ## Geospatial dataset giving the center of the counies stored in a database (for this demo it is inside a SQLite file).
    quotient1 = enso_project.data / "ColoradoGeoData.db"
    ## 1 - Read the SQLite file that has the latitude & longitude of each county.
    operator12 = quotient1.read
    ## 2 - Query the datababase to get the values for [COUNTY], [CENT_LAT], [CENT_LONG]
    operator29 = operator12.query "ColoradoLatLong"
    ## 3 - Rename the columns to give them friendlier names: [County], [Latitude], [Longitude]
    operator31 = operator29.rename_columns ["County", "Latitude", "Longitude"]
    ## 4 - This read component pulls the data into Enso's in-memory engine for further processing
    operator32 = operator31.read
    ## 1 - Typically you would drag this file onto the canvas. If you click on the word "path" here, you will also see how you can select a file from your computer.
    any2 = Data.read operator8
    ## 2 - Parse (convert) the date from  a text format to a date format. This will be important for comparing dates or calculating date parts like the month or year.
    operator26 = any2.parse ['date'] ..Date "MM/dd/yyyy"
    ## 3 - Select just the columns that we need.
    operator14 = operator26.select_columns ["date", "county", "One_Week_Cumulative_Incidence"] Boolean.True
    ## 4 - Rename to friendly names.
    operator16 = operator14.rename_columns [(Pair.Value 'date' 'Date'), (Pair.Value 'county' 'County'), (Pair.Value 'One_Week_Cumulative_Incidence' 'Cases')]
    ## 5 - Change the data type of cases from a floating point number to an integer
    operator13 = operator16.cast ['Cases'] ..Integer
    ## 7 - Calculate the number of cases for each county for each day
    operator19 = operator13.cross_tab ["Date"] "County" (..Sum 'Cases')
    ## 6 - For each day, summarize the total number of cases across all counites, and calculate the  maximum number of cases across all counties 
    operator17 = operator13.aggregate ['Date'] [(..Sum 'Cases' 'Cases'), (..Maximum 'Cases' 'MaxByCounty')]
    ## 8 - Join the aggregate result for statewide results with the cross_tab result with cases for each of the counties for each day 
    operator21 = operator17.join operator19 ..Inner [(..Equals 'Date')]
    ## 9 - Sort the joined data by the [Date] from earliest to latest.
    operator18 = operator21.sort [(..Name 'Date')]
    ## 5 - Change this date to see the map update
    date1 = Date.new 2022 2 2
    ## 6 - Filter the COVID case date to a specific date
    any6 = operator13.filter 'Date' (..Equal date1)
    ## 7 - set the radius of the circles at the center of each county to a radius of the  number of cases * 10. Try modifying this to see larger or smaller circles on the map.
    operator6 = any6.set (..Simple_Expr (..Name 'Cases') (..Multiply 10)) "Radius"
    ## 8 - Join the COVID case date for the specific date with the latitude and longitude of the center of each county. This allows us to represent the data on a map!
    operator33 = operator6.join operator32 Join_Kind.Inner [(Join_Condition.Equals 'County')] 




#### METADATA ####
[[{"index":{"value":4426},"size":{"value":59}},"306b9931-c7cf-4b8f-ac97-04b418c2f878"],[{"index":{"value":4626},"size":{"value":40}},"ccc40fae-9b04-472a-b49f-5bebd8b7089c"],[{"index":{"value":4766},"size":{"value":14}},"62fdd815-a8a8-460d-bf97-0f93245ce336"],[{"index":{"value":4886},"size":{"value":34}},"a1b8d756-3532-45f2-ad39-2f1fa7b039a8"],[{"index":{"value":5033},"size":{"value":61}},"db9152b8-f7b1-47eb-9024-800af8b72706"],[{"index":{"value":5210},"size":{"value":15}},"33a1a367-7fd0-442f-8e7c-5f450e89d7f8"],[{"index":{"value":5402},"size":{"value":19}},"25681472-802d-44ca-8f80-b6e90863e2c2"],[{"index":{"value":5606},"size":{"value":39}},"eeb99498-5293-4e70-a71b-9fd9b5755a74"],[{"index":{"value":5712},"size":{"value":90}},"4127ea1d-d74d-4e35-b390-b1b706193ea0"],[{"index":{"value":5857},"size":{"value":140}},"acddbefa-631b-472c-b7dd-4ae0621580f6"],[{"index":{"value":6099},"size":{"value":35}},"b01bf8fd-892d-4d9a-9577-fe1ae14255fa"],[{"index":{"value":6222},"size":{"value":54}},"43523522-2707-4155-9cfb-daa37f043c1c"],[{"index":{"value":6440},"size":{"value":90}},"5a4d839b-62c9-46d8-8f15-37acbf0198a3"],[{"index":{"value":6683},"size":{"value":54}},"77355e47-3f8a-4255-85c7-6ebb4d7f75af"],[{"index":{"value":6826},"size":{"value":33}},"445cf7f7-d933-4d32-a472-5f9a1431770e"],[{"index":{"value":6922},"size":{"value":17}},"5d487374-1a54-4dda-8f68-82eaa0c5be1b"],[{"index":{"value":7008},"size":{"value":40}},"0f1c5b66-4f1d-4d54-a99f-c37f1537026c"],[{"index":{"value":7241},"size":{"value":66}},"03bf13ef-6940-41f0-825a-e0ccb49e89f4"],[{"index":{"value":7492},"size":{"value":76}},"a6d1a1be-96b4-4e2b-87c6-f396735449aa"]]
{"ide":{"node":{"306b9931-c7cf-4b8f-ac97-04b418c2f878":{"position":{"vector":[-58,120]}},"ccc40fae-9b04-472a-b49f-5bebd8b7089c":{"position":{"vector":[1111,120]}},"62fdd815-a8a8-460d-bf97-0f93245ce336":{"position":{"vector":[1115,48]},"visualization":{"show":true,"height":0,"project":{"project":"Builtin"},"name":"JSON"}},"a1b8d756-3532-45f2-ad39-2f1fa7b039a8":{"position":{"vector":[1115,-96]},"visualization":{"show":true,"width":723.4802537604944}},"db9152b8-f7b1-47eb-9024-800af8b72706":{"position":{"vector":[1115,-380]}},"33a1a367-7fd0-442f-8e7c-5f450e89d7f8":{"position":{"vector":[1115,-452]}},"25681472-802d-44ca-8f80-b6e90863e2c2":{"position":{"vector":[-58,12]},"visualization":{"show":true,"width":854.8652343749999}},"eeb99498-5293-4e70-a71b-9fd9b5755a74":{"position":{"vector":[-58,-295]},"visualization":{"show":true,"width":855.4264772329758}},"4127ea1d-d74d-4e35-b390-b1b706193ea0":{"position":{"vector":[-58,-557]},"visualization":{"show":true}},"acddbefa-631b-472c-b7dd-4ae0621580f6":{"position":{"vector":[-58,-839]},"visualization":{"show":true}},"b01bf8fd-892d-4d9a-9577-fe1ae14255fa":{"position":{"vector":[-58,-1120]},"visualization":{"show":true,"width":1017.1461567618942}},"43523522-2707-4155-9cfb-daa37f043c1c":{"position":{"vector":[704,-1676]},"visualization":{"show":true,"width":969.1570917385728}},"5a4d839b-62c9-46d8-8f15-37acbf0198a3":{"position":{"vector":[-54,-1428]},"visualization":{"show":true}},"77355e47-3f8a-4255-85c7-6ebb4d7f75af":{"position":{"vector":[-54,-1909]}},"445cf7f7-d933-4d32-a472-5f9a1431770e":{"position":{"vector":[-53,-2000]},"visualization":{"show":true,"width":850.1484211024953}},"5d487374-1a54-4dda-8f68-82eaa0c5be1b":{"position":{"vector":[1115,-524]}},"0f1c5b66-4f1d-4d54-a99f-c37f1537026c":{"position":{"vector":[1119,-596]},"visualization":{"show":true,"width":600.4438549440298}},"03bf13ef-6940-41f0-825a-e0ccb49e89f4":{"position":{"vector":[1115,-901]},"visualization":{"show":true,"width":655.509525128265}},"a6d1a1be-96b4-4e2b-87c6-f396735449aa":{"position":{"vector":[1119,-1159]},"visualization":{"show":true,"width":976.0901717000933,"height":444.06091298712835,"project":{"project":"Builtin"},"name":"Geo Map"}}},"import":{"14843884512460083621":{}},"project":{"call_stack":[]}}}