from Standard.Base import all
from Standard.Table import all
from Standard.Database import all
from Standard.AWS import all
import Standard.Visualization

main = 
    IO.println "Project Start:      "+Time_Of_Day.now.to_text

    operator1 = enso_project.data/'new.csv' . read (Delimited_Format.Delimited ';')
    operator8 = operator1.parse ['TX_AMOUNT'] (Value_Type.Float) on_problems=Problem_Behavior.Ignore
    operator10 = operator8.parse ['TX_DATETIME'] (Value_Type.Date_Time) "dd.MM.yyyy HH:mm" on_problems=Problem_Behavior.Report_Error
    IO.println "CSV Read and Parse: "+Time_Of_Day.now.to_text

    operator3 = enso_project.data/"internal.db" . read
    operator4 = operator3.query 'transactions'
    operator15 = operator4.select_columns ['Transaction ID', 'CUSTOMER_ID', 'Amount']
    operator9 = operator15.read
    IO.println "Database Read:      "+Time_Of_Day.now.to_text

    operator12 = operator10.join operator9 Join_Kind.Inner [(Join_Condition.Equals 'TRANSACTION_ID' 'Transaction ID'), (Join_Condition.Equals 'CUSTOMER_ID')]
    operator18 = operator12.at 'Amount'
    operator21 = operator12.fill_nothing ['TX_AMOUNT'] operator18
    operator16 = operator21.remove_columns ['Transaction ID', 'Amount']
    IO.println "TX_AMOUNT Repair:   "+Time_Of_Day.now.to_text

    operator17 = operator16.distinct ['CUSTOMER_ID', 'TRANSACTION_ID', 'TX_AMOUNT'] on_problems=Problem_Behavior.Ignore
    operator30 = operator17.set "Truncate([TX_DATETIME])" "Date"
    operator28 = operator30.add_row_number "RowNum"
    operator31 = operator28.set "[TX_AMOUNT]>=220" "Fraud"
    IO.println "Initial Derive:     "+Time_Of_Day.now.to_text

    operator5 = operator16.aggregate [(Aggregate_Column.Group_By 'TRANSACTION_ID'), (Aggregate_Column.Count)]
    operator7 = operator5.filter 'Count' (Filter_Condition.Greater 1)
    operator2 = operator7.remove_columns ['Count']
    operator63 = operator2.set "True" "Fraud"
    operator35 = operator31.lookup_and_replace operator63 ['TRANSACTION_ID']
    IO.println "Flag Duplicates:    "+Time_Of_Day.now.to_text

    operator29 = operator35.aggregate [(Aggregate_Column.Group_By 'Date'), (Aggregate_Column.First 'TERMINAL_ID' 'TERMINAL_ID')]
    operator39 = operator29.at 'Date'
    operator32 = operator39.date_add 28 Date_Period.Day
    operator33 = operator29.set operator32 "end_date"
    operator42 = operator35.join operator33 Join_Kind.Inner [(Join_Condition.Equals 'TERMINAL_ID'), (Join_Condition.Between 'Date' 'Date' 'end_date')]
    operator43 = operator42.remove_columns ['Right Date', 'end_date']
    operator45 = operator43.set "True" new_name='Fraud'
    operator22 = operator45.select_columns ['RowNum', 'Fraud']
    operator6 = operator35.lookup_and_replace operator22 ['RowNum']
    IO.println "Flag Terminals:     "+Time_Of_Day.now.to_text

    operator36 = operator6.aggregate [(Aggregate_Column.Group_By 'CUSTOMER_ID'), (Aggregate_Column.Group_By 'Date')]
    operator34 = Random.new
    operator11 = operator36.at 'CUSTOMER_ID'
    operator13 = operator11.map _-> operator34.integer
    operator37 = operator36.set operator13 "Rand"
    IO.println "Random Map 1:      "+Time_Of_Day.now.to_text
    operator40 = operator37.order_by ['Date', 'Rand']
    IO.println "Sorting:           "+Time_Of_Day.now.to_text
    operator38 = operator40.add_row_number group_by=['Date']    
    IO.println "Group Order By:    "+Time_Of_Day.now.to_text
    operator61 = operator38.filter 'Row' (Filter_Condition.Equal_Or_Less 3)
    IO.println "Filter Less Than:  "+Time_Of_Day.now.to_text
    operator55 = operator61.at 'Date'
    operator56 = operator55.date_add 14 Date_Period.Day
    operator57 = operator61.set operator56 'end_date'
    operator58 = operator6.join operator57 Join_Kind.Inner [(Join_Condition.Equals 'CUSTOMER_ID'), (Join_Condition.Between 'Date' 'Date' 'end_date')]
    IO.println "Join Back:         "+Time_Of_Day.now.to_text
    operator23 = operator58.aggregate [(Aggregate_Column.Group_By 'RowNum'), (Aggregate_Column.First 'TX_AMOUNT' 'TX_AMOUNT')]
    IO.println "Unique Aggregate:  "+Time_Of_Day.now.to_text
    operator14 = operator23.at 'RowNum'
    operator48 = operator14 . map _-> operator34.integer
    operator51 = operator23.set operator48 "Rand"
    IO.println "Random Map 2:      "+Time_Of_Day.now.to_text
    operator52 = operator51.order_by ['Rand']
    IO.println "Sorting:           "+Time_Of_Day.now.to_text
    operator47 = operator52.take (Index_Sub_Range.Every 3)
    IO.println "Samples:           "+Time_Of_Day.now.to_text
    operator41 = operator47.set "5 * [TX_AMOUNT]" 'TX_AMOUNT'
    operator59 = operator41.set "True" 'Fraud'
    operator25 = operator59.select_columns ['RowNum', 'TX_AMOUNT', 'Fraud']
    operator20 = operator6.lookup_and_replace operator25 ['RowNum']
    IO.println "Flag Customers:     "+Time_Of_Day.now.to_text

    operator19 = operator20.cast ['Date', 'TX_DATETIME'] (Value_Type.Char)
    IO.println "Cast:               "+Time_Of_Day.now.to_text

    operator26 = operator3.create_table "full data" operator19 ["TRANSACTION_ID"] allow_existing=Boolean.True
    operator24 = operator26.update_rows operator19 Update_Action.Align_Records ['TRANSACTION_ID']
    IO.println "Database Write:     "+Time_Of_Day.now.to_text
